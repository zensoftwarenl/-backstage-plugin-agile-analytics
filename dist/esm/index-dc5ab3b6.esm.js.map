{"version":3,"file":"index-dc5ab3b6.esm.js","sources":["../../src/components/AaTimeSelect/AaTimeSelect.tsx","../../src/components/AaDoraChart/AaDoraChart.tsx","../../src/components/AaDoraPage/AaDoraPage.tsx","../../src/components/AaSprintInsightsTable/AaSprintInsightsTable.tsx","../../src/components/AaSprintInsightsPage/AaSprintInsightsPage.tsx","../../src/components/AaStockPage/AaStockPage.tsx","../../src/components/AaLeaksPage/AaLeaksPage.tsx","../../src/components/AaContentComponent/AaContentComponent.tsx","../../src/components/AaMainComponent/AaMainComponent.tsx"],"sourcesContent":["/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { Select } from '@backstage/core-components';\r\nimport { Timeperiod } from '../../api/types';\r\nimport { getEndDate, getStartDate } from '../../helpers';\r\n\r\nexport const AaTimeSelect = ({\r\n  timeperiod,\r\n  setTimeperiod,\r\n}: {\r\n  timeperiod: Timeperiod;\r\n  setTimeperiod: any;\r\n}) => {\r\n  const timeSelect = [\r\n    {\r\n      date_start: getStartDate(6, 'days'),\r\n      date_end: getEndDate(),\r\n      label: 'Last 7 days',\r\n      value: '7days',\r\n    },\r\n    {\r\n      date_start: getStartDate(13, 'days'),\r\n      date_end: getEndDate(),\r\n      label: 'Last 14 days',\r\n      value: '14days',\r\n    },\r\n    {\r\n      date_start: getStartDate(2, 'months'),\r\n      date_end: getEndDate(),\r\n      label: 'Last 2 months',\r\n      value: '2months',\r\n    },\r\n    {\r\n      date_start: getStartDate(3, 'months'),\r\n      date_end: getEndDate(),\r\n      label: 'Last 3 months',\r\n      value: '3months',\r\n    },\r\n  ];\r\n\r\n  function handleTimeperiodChange(value: string) {\r\n    const updatedTimeperiod = timeSelect.find(period => period.value === value);\r\n    if (updatedTimeperiod) {\r\n      setTimeperiod(updatedTimeperiod);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Select\r\n      label=\"Timeperiod\"\r\n      items={timeSelect}\r\n      selected=\"7days\"\r\n      onChange={e => handleTimeperiodChange(e.toString())}\r\n    />\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { DoraChart, DoraSeries, Option, Timeperiod } from '../../api/types';\r\nimport { Progress, Select } from '@backstage/core-components';\r\nimport InfoRounded from '@material-ui/icons/InfoRounded';\r\n\r\nexport const AaDoraChart = ({\r\n  timeperiod,\r\n  charts,\r\n  chartColor = null,\r\n  customOptions,\r\n  customPointFormatter,\r\n  yAxisType = 'linear',\r\n  yAxisFormat = '{value}',\r\n  yAxisFormatter,\r\n  chartHeight,\r\n  loading = false,\r\n  className = '',\r\n  yAxisTitle,\r\n  customOpacity,\r\n  isMarker = true,\r\n  isStacking = true,\r\n  setUpdate = null,\r\n  update = 0,\r\n}: {\r\n  timeperiod: Timeperiod;\r\n  charts: any;\r\n  chartColor?: any;\r\n  customOptions?: any;\r\n  customPointFormatter?: any;\r\n  yAxisType?: any;\r\n  yAxisFormat?: string;\r\n  yAxisFormatter?: any;\r\n  chartHeight?: number;\r\n  loading?: boolean;\r\n  className?: string;\r\n  yAxisTitle?: string;\r\n  customOpacity?: number;\r\n  isMarker?: boolean;\r\n  isStacking?: boolean;\r\n  setUpdate?: React.Dispatch<React.SetStateAction<number>> | null;\r\n  update?: number;\r\n}) => {\r\n  // console.log('charts 1', charts[1]?.series[0].data[0]);\r\n  const { date_end, date_start } = timeperiod;\r\n  const [yAxisCustomLabels, setYAxisCustomLabels] = useState<{\r\n    formatter?: any;\r\n    format?: any;\r\n  }>({\r\n    format: yAxisFormat,\r\n  });\r\n\r\n  const [tooltip, setTooltip] = useState<{\r\n    headerFormat: string;\r\n    shared: boolean;\r\n    pointFormatter?: any;\r\n  }>({\r\n    shared: false,\r\n    headerFormat: '<span style=\"font-size:12px\"><b>{point.key}</b></span><br>',\r\n  }); // shared: false -> tooltip will be hidden on mouseout; currently to have shared:false, providing customPointFormatter is required (otherwise it`ll be changed to true (line 69))\r\n  const [selectedChart, setSelectedChart] = useState<any>(null);\r\n  // console.log('selectedChart', selectedChart);\r\n  const [infoHoverStatus, setInfoHoverStatus] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if ((charts?.length, update === 0)) {\r\n      const formatted = {\r\n        ...charts[0],\r\n        series: formatSeries(charts[0]?.series),\r\n      };\r\n      setSelectedChart(formatted);\r\n    }\r\n  }, [charts, update]);\r\n\r\n  useEffect(() => {\r\n    if (yAxisFormatter) {\r\n      setYAxisCustomLabels({ formatter: yAxisFormatter });\r\n    } else {\r\n      setYAxisCustomLabels({\r\n        format: yAxisFormat,\r\n      });\r\n    }\r\n  }, [yAxisFormatter, yAxisFormat]);\r\n\r\n  useEffect(() => {\r\n    if (customPointFormatter) {\r\n      setTooltip(prevState => {\r\n        return { ...prevState, pointFormatter: customPointFormatter };\r\n      });\r\n    } else {\r\n      setTooltip({\r\n        shared: true,\r\n        headerFormat:\r\n          '<span style=\"font-size:12px\"><b>{point.key}</b></span><br>',\r\n      });\r\n    }\r\n  }, [customPointFormatter]);\r\n\r\n  const selectOptions = charts?.map((chart: DoraChart) => chart.title);\r\n\r\n  const options: Highcharts.Options = {\r\n    colors: chartColor ?? ['#7902D7', '#F8C238', '#15A2BB'],\r\n    chart: {\r\n      height: chartHeight,\r\n    },\r\n    title: {\r\n      text: '',\r\n    },\r\n    yAxis: {\r\n      labels: yAxisCustomLabels,\r\n      type: yAxisType,\r\n      title: {\r\n        text: yAxisTitle ?? '',\r\n      },\r\n      min: 0,\r\n    },\r\n    xAxis: {\r\n      type: 'datetime',\r\n      labels: {\r\n        format: '{value:%d %b}',\r\n        align: 'right',\r\n      },\r\n      gridLineWidth: 1,\r\n      min: date_start * 1000,\r\n      max: date_end * 1000,\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    tooltip: tooltip,\r\n    plotOptions: {\r\n      series: {\r\n        opacity: customOpacity ?? 0.8,\r\n        stickyTracking: false,\r\n        events: {\r\n          mouseOut: function () {\r\n            this.chart.tooltip.hide();\r\n          },\r\n        },\r\n      },\r\n      area: {\r\n        stacking: isStacking ? 'normal' : undefined,\r\n        marker: {\r\n          enabled: isMarker,\r\n          states: {\r\n            hover: {\r\n              enabled: isMarker,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      column: {\r\n        stacking: isStacking ? 'normal' : undefined,\r\n        dataLabels: {\r\n          enabled: true,\r\n        },\r\n      },\r\n      line: {\r\n        marker: {\r\n          enabled: false,\r\n          states: {\r\n            hover: {\r\n              enabled: false,\r\n            },\r\n          },\r\n        },\r\n        zIndex: -10,\r\n        lineWidth: 1,\r\n      },\r\n      scatter: {\r\n        marker: {\r\n          radius: 6,\r\n        },\r\n      },\r\n      pie: {\r\n        allowPointSelect: true,\r\n        cursor: 'pointer',\r\n        dataLabels: {\r\n          enabled: true,\r\n          format: '<b>{point.name}</b>: {point.percentage:.1f} %',\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      enabled: true,\r\n    },\r\n    series: selectedChart?.series ?? [{ data: [null, null] }],\r\n  };\r\n\r\n  function formatSeries(series: DoraSeries[]) {\r\n    return series?.map((chart: DoraSeries) => {\r\n      return {\r\n        name: chart.name ?? '',\r\n        data: chart.data,\r\n        type: chart.type ?? 'area',\r\n        stickyTracking: false,\r\n      };\r\n    });\r\n  }\r\n\r\n  function handleChartChange(value: string) {\r\n    if (setUpdate) {\r\n      setUpdate(prevState => prevState + 1);\r\n    }\r\n    const selected = charts.find(\r\n      (chart: DoraChart) => chart.title.value === value,\r\n    );\r\n\r\n    if (selected) {\r\n      setSelectedChart({\r\n        ...selected,\r\n        series: formatSeries(selected?.series),\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {charts[0]?.title?.label ? (\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            height: 70,\r\n            alignItems: 'center',\r\n            paddingLeft: 4,\r\n            paddingRight: 4,\r\n            paddingBottom: 24,\r\n          }}\r\n        >\r\n          {charts?.length && charts.length > 1 ? (\r\n            <div style={{ display: 'flex', position: 'relative' }}>\r\n              <Select\r\n                label=\"\"\r\n                items={selectOptions}\r\n                selected=\"cycle-time\"\r\n                onChange={e => handleChartChange(e.toString())}\r\n              />\r\n              {selectedChart?.description ? (\r\n                <>\r\n                  <div\r\n                    style={{ marginTop: 20, marginLeft: 4, cursor: 'pointer' }}\r\n                    onMouseOver={() => setInfoHoverStatus(true)}\r\n                    onFocus={() => setInfoHoverStatus(true)}\r\n                    onMouseOut={() => setInfoHoverStatus(false)}\r\n                    onBlur={() => setInfoHoverStatus(false)}\r\n                  >\r\n                    <InfoRounded />\r\n                  </div>\r\n                  {infoHoverStatus && (\r\n                    <div\r\n                      style={{\r\n                        position: 'absolute',\r\n                        top: -4,\r\n                        right: -304,\r\n                        zIndex: 2,\r\n                        fontSize: 12,\r\n                        display: 'block',\r\n                        width: 300,\r\n                      }}\r\n                    >\r\n                      {selectedChart.description}\r\n                    </div>\r\n                  )}\r\n                </>\r\n              ) : null}\r\n            </div>\r\n          ) : null}\r\n          {charts?.length && charts.length === 1 ? (\r\n            <div style={{ display: 'flex', position: 'relative' }}>\r\n              <h5 style={{ fontSize: 24, fontWeight: 500 }}>\r\n                {charts[0].title.label}\r\n              </h5>\r\n              {charts[0]?.description ? (\r\n                <>\r\n                  <div\r\n                    style={{ marginTop: 20, marginLeft: 4, cursor: 'pointer' }}\r\n                    onMouseOver={() => setInfoHoverStatus(true)}\r\n                    onFocus={() => setInfoHoverStatus(true)}\r\n                    onMouseOut={() => setInfoHoverStatus(false)}\r\n                    onBlur={() => setInfoHoverStatus(false)}\r\n                  >\r\n                    <InfoRounded />\r\n                  </div>\r\n                  {infoHoverStatus && (\r\n                    <div\r\n                      style={{\r\n                        position: 'absolute',\r\n                        top: -4,\r\n                        right: -304,\r\n                        zIndex: 2,\r\n                        fontSize: 12,\r\n                        display: 'block',\r\n                        width: 300,\r\n                      }}\r\n                    >\r\n                      {charts[0].description}\r\n                    </div>\r\n                  )}\r\n                </>\r\n              ) : null}\r\n            </div>\r\n          ) : null}\r\n          {selectedChart?.averageValue ? (\r\n            <p style={{ fontSize: 24, fontWeight: 700 }}>\r\n              <span className=\"font-display text-lg font-semibold leading-5\">\r\n                {selectedChart.averageValue}\r\n              </span>{' '}\r\n              <span className=\"font-display\">\r\n                {selectedChart?.averageMeasure}\r\n              </span>\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n      ) : null}\r\n\r\n      {loading ? (\r\n        <Progress />\r\n      ) : (\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={customOptions ? customOptions : options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { InfoCard, Progress } from \"@backstage/core-components\";\r\nimport {\r\n  Deployment,\r\n  DeploymentFreqResponse,\r\n  FilterRepo,\r\n  Repo,\r\n  Timeperiod,\r\n} from \"../../api/types\";\r\nimport { Chip, Grid } from \"@material-ui/core\";\r\nimport { configApiRef, useApi } from \"@backstage/core-plugin-api\";\r\nimport { agileAnalyticsApiRef } from \"../../api\";\r\nimport useAsync from \"react-use/lib/useAsync\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { AaDoraChart } from \"../AaDoraChart\";\r\nimport moment from \"moment\";\r\n\r\nexport const AaDoraPage = ({ timeperiod }: { timeperiod: Timeperiod }) => {\r\n  const api = useApi(agileAnalyticsApiRef);\r\n  const config = useApi(configApiRef);\r\n  const orgHash = config.getString(\"agileAnalytics.orgHash\");\r\n  const apiKey = config.getString(\"agileAnalytics.apiKey\");\r\n\r\n  // =======FILTER  SETUP========\r\n  const reposState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getReposData({\r\n      orgHash,\r\n      apiKey,\r\n    });\r\n    return response;\r\n  }, []);\r\n\r\n  const [repositoriesFilter, setRepositoriesFilter] = useState<FilterRepo[]>(\r\n    []\r\n  );\r\n  const [update, setUpdate] = useState<number>(0);\r\n\r\n  // formatting All repositories for the filter (adding isSelected: true/false)\r\n  useEffect(() => {\r\n    if (reposState?.value?.length) {\r\n      const formatted = reposState?.value\r\n        .reduce((acc: FilterRepo[], item: Repo) => {\r\n          const group = item.provider_id;\r\n          const options = item.repositories.map((repository) => {\r\n            return {\r\n              ...repository,\r\n              group: group,\r\n              isSelected: repository?.webhook ?? false,\r\n            };\r\n          });\r\n          return [...acc, ...options];\r\n        }, [])\r\n        .filter((repo: FilterRepo) => repo.webhook);\r\n\r\n      setRepositoriesFilter(formatted);\r\n    } else {\r\n      setRepositoriesFilter([]);\r\n    }\r\n  }, [reposState.value]);\r\n\r\n  // ============= GENERAL DORA CHARTS SETUP===================\r\n  const [timeperiodByDays, setTimeperiodByDays] = useState<\r\n    { start: number; end: number }[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    if (timeperiod.date_start && timeperiod.date_end) {\r\n      const timestampsByDays: any[] = [];\r\n      let dayStartTimestamp = timeperiod.date_start * 1000;\r\n      let dayEndTimestamp = +moment(dayStartTimestamp)\r\n        .add(1, \"days\")\r\n        .subtract(1, \"seconds\")\r\n        .format(\"x\");\r\n\r\n      while (dayEndTimestamp < timeperiod.date_end * 1000) {\r\n        timestampsByDays.push({\r\n          start: dayStartTimestamp,\r\n          end: dayEndTimestamp,\r\n        });\r\n        dayStartTimestamp = +moment(dayStartTimestamp)\r\n          .add(1, \"days\")\r\n          .format(\"x\");\r\n        dayEndTimestamp = +moment(dayEndTimestamp).add(1, \"days\").format(\"x\");\r\n      }\r\n\r\n      timestampsByDays.push({\r\n        start: dayStartTimestamp,\r\n        end: dayEndTimestamp,\r\n      });\r\n\r\n      setTimeperiodByDays(timestampsByDays);\r\n    }\r\n  }, [timeperiod]);\r\n\r\n  // ===================DEPLOYMENT FREQUENCY SETUP=============================\r\n  const deploymentFreqState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getDeploymentFreqData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  const [filteredDeploymentFreqData, setFilteredDeploymentFreqData] =\r\n    useState<any>([]);\r\n  const [formattedDeploymentFreqData, setFormattedDeploymentFreqData] =\r\n    useState<any>([]);\r\n  const [\r\n    formattedDeploymentFreqSuccessData,\r\n    setFormattedDeploymentFreqSuccessData,\r\n  ] = useState<any>([]);\r\n  const [\r\n    formattedDeploymentFreqFailedData,\r\n    setFormattedDeploymentFreqFailedData,\r\n  ] = useState<any>([]);\r\n  const [averageDeploymentFreq, setAverageDeploymentFreq] = useState<\r\n    string | null\r\n  >(null);\r\n\r\n  const chartsDeploymentFreq = [\r\n    {\r\n      title: {\r\n        label: \"Deployment frequency\",\r\n        value: \"deployment-frequency\",\r\n      },\r\n      averageMeasure: \"p/day\",\r\n      averageValue: averageDeploymentFreq,\r\n      series: [\r\n        {\r\n          name: \"Successful deployments\",\r\n          data: formattedDeploymentFreqSuccessData\r\n            ? formattedDeploymentFreqSuccessData\r\n            : [],\r\n        },\r\n        {\r\n          name: \"Failed deployments\",\r\n          data: formattedDeploymentFreqFailedData\r\n            ? formattedDeploymentFreqFailedData\r\n            : [],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const filterDeploymentFreq = useCallback(\r\n    (data) => {\r\n      const filteredData = data.filter((deployment: Deployment) => {\r\n        return repositoriesFilter.find(\r\n          (repo) =>\r\n            repo.isSelected &&\r\n            repo.url.includes(\r\n              deployment?.repository?.replace(\"git@gitlab.com:\", \"\")\r\n            )\r\n        );\r\n      });\r\n      return filteredData;\r\n    },\r\n    [repositoriesFilter]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (deploymentFreqState?.value?.length) {\r\n      const filteredData = filterDeploymentFreq(deploymentFreqState.value);\r\n      setFilteredDeploymentFreqData(filteredData);\r\n    } else {\r\n      setFilteredDeploymentFreqData([]);\r\n    }\r\n  }, [deploymentFreqState, filterDeploymentFreq]);\r\n\r\n  const formatDeploymentFreq = useCallback(\r\n    (status = \"success\") => {\r\n      return timeperiodByDays.reduce((acc: number[][], day, i) => {\r\n        let deployments = filteredDeploymentFreqData.filter(\r\n          (deployment: Deployment) =>\r\n            deployment.timestamp * 1000 >= day.start &&\r\n            deployment.timestamp * 1000 <= day.end\r\n        );\r\n\r\n        if (status) {\r\n          deployments = deployments.filter(\r\n            (deployment: Deployment) => deployment.status === status\r\n          );\r\n        }\r\n\r\n        if (i === timeperiodByDays?.length - 1) {\r\n          return [\r\n            ...acc,\r\n            [day.start, deployments.length],\r\n            [day.end, deployments.length],\r\n          ];\r\n        }\r\n        return [...acc, [day.start, deployments.length]];\r\n      }, []);\r\n    },\r\n    [filteredDeploymentFreqData, timeperiodByDays]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (filteredDeploymentFreqData?.length) {\r\n      setFormattedDeploymentFreqSuccessData(formatDeploymentFreq(\"success\"));\r\n      setFormattedDeploymentFreqFailedData(formatDeploymentFreq(\"failed\"));\r\n      setFormattedDeploymentFreqData(formatDeploymentFreq());\r\n    } else {\r\n      setFormattedDeploymentFreqSuccessData([]);\r\n      setFormattedDeploymentFreqFailedData([]);\r\n      setFormattedDeploymentFreqData([]);\r\n    }\r\n  }, [filteredDeploymentFreqData?.length, formatDeploymentFreq]);\r\n\r\n  useEffect(() => {\r\n    if (formattedDeploymentFreqData?.length) {\r\n      const totalDeployments = formattedDeploymentFreqData.reduce(\r\n        (acc: number, item: number[], i: number) =>\r\n          formattedDeploymentFreqData.length - 1 !== i ? acc + item[1] : acc,\r\n        0\r\n      );\r\n      const avgDeployments = (\r\n        totalDeployments / timeperiodByDays.length\r\n      ).toFixed(2);\r\n      setAverageDeploymentFreq(avgDeployments);\r\n    } else {\r\n      setAverageDeploymentFreq(null);\r\n    }\r\n  }, [formattedDeploymentFreqData, timeperiodByDays, repositoriesFilter]);\r\n\r\n  function handleRepoToggle(repo: FilterRepo) {\r\n    const updatedRepos: FilterRepo[] = repositoriesFilter.map(\r\n      (filterRepo: FilterRepo) => {\r\n        if (filterRepo.url === repo.url) {\r\n          return { ...filterRepo, isSelected: !filterRepo.isSelected };\r\n        }\r\n        return filterRepo;\r\n      }\r\n    );\r\n    setRepositoriesFilter(updatedRepos);\r\n  }\r\n\r\n  // =============== LEAD/CYCLE TIME SETUP ========================\r\n\r\n  const leadTimeState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getLeadTimeData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  const [filteredLeadTimeData, setFilteredLeadTimeData] = useState<any[]>([]);\r\n  const [formattedLeadTimeData, setFormattedLeadTimeData] = useState<\r\n    number[][]\r\n  >([]);\r\n  const [ticketKeys, setTicketKeys] = useState<string[]>([]);\r\n  const [formattedLeadTimeForChangeData, setFormattedLeadTimeForChangeData] =\r\n    useState<number[][]>([]);\r\n  const [formattedCycleTimeData, setFormattedCycleTimeData] = useState<\r\n    number[][]\r\n  >([]);\r\n  const [averageCycleTimeChartData, setAverageCycleTimeChartData] = useState<\r\n    any[]\r\n  >([]);\r\n  const [averageLeadTimeChartData, setAverageLeadTimeChartData] = useState<\r\n    any[]\r\n  >([]);\r\n  const [\r\n    averageLeadTimeForChangeChartData,\r\n    setAverageLeadTimeForChangeChartData,\r\n  ] = useState<any[]>([]);\r\n  const [averageCycleTime, setAverageCycleTime] = useState<{\r\n    cycleTime: string | null;\r\n    leadTime: string | null;\r\n    leadTimeForChange: string | null;\r\n  } | null>(null);\r\n  const chartsLeadTime = [\r\n    {\r\n      title: {\r\n        value: \"cycle-time\",\r\n        label: \"Cycle Time\",\r\n      },\r\n      description:\r\n        \"Measures the time difference between the starting time of implementing a requirement and when the changes are delivered to production.\",\r\n      averageMeasure: \"\",\r\n      averageValue: averageCycleTime?.cycleTime,\r\n      series: [\r\n        {\r\n          name: \"Deployments Cycle Time\",\r\n          type: \"scatter\",\r\n          data: formattedCycleTimeData?.length ? formattedCycleTimeData : [],\r\n        },\r\n\r\n        {\r\n          name: \"Average\",\r\n          type: \"line\",\r\n          data: averageCycleTimeChartData?.length\r\n            ? averageCycleTimeChartData\r\n            : [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: {\r\n        value: \"lead-time\",\r\n        label: \"Lead Time\",\r\n      },\r\n      description:\r\n        \"Measures the time difference between the time a requirement is created and when the changes are delivered to production.\",\r\n      averageMeasure: \"\",\r\n      averageValue: averageCycleTime?.leadTime,\r\n      series: [\r\n        {\r\n          name: \"Deployments Lead Time\",\r\n          type: \"scatter\",\r\n          data: formattedLeadTimeData.length ? formattedLeadTimeData : [],\r\n        },\r\n\r\n        {\r\n          name: \"Average\",\r\n          type: \"line\",\r\n          data: averageLeadTimeChartData.length ? averageLeadTimeChartData : [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: {\r\n        value: \"lead-time-for-change\",\r\n        label: \"Lead Time for Changes\",\r\n      },\r\n      description:\r\n        \"Measures the amount of time it takes a commit to get into production.\",\r\n      averageMeasure: \"\",\r\n      averageValue: averageCycleTime?.leadTimeForChange,\r\n      series: [\r\n        {\r\n          name: \"Deployments Lead Time For Changes\",\r\n          type: \"scatter\",\r\n          data: formattedLeadTimeForChangeData.length\r\n            ? formattedLeadTimeForChangeData\r\n            : [],\r\n        },\r\n\r\n        {\r\n          name: \"Average\",\r\n          type: \"line\",\r\n          data: averageLeadTimeForChangeChartData.length\r\n            ? averageLeadTimeForChangeChartData\r\n            : [],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // FILTER API RESPONCE\r\n  useEffect(() => {\r\n    if (leadTimeState?.value?.length) {\r\n      const filteredData = filterDeploymentFreq(leadTimeState.value);\r\n      setFilteredLeadTimeData(filteredData);\r\n    } else {\r\n      setFilteredLeadTimeData([]);\r\n    }\r\n  }, [leadTimeState?.value, repositoriesFilter, filterDeploymentFreq]);\r\n\r\n  // FORMAT FILTERED  API RESPONSE\r\n  const formatLeadTimeData = useCallback(\r\n    (propertyKey: string) => {\r\n      return filteredLeadTimeData.map((deployment) => [\r\n        deployment.timestamp * 1000,\r\n        deployment[propertyKey] * 1000, // the value comes in seconds, convert to milliseconds\r\n      ]);\r\n    },\r\n    [filteredLeadTimeData]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (filteredLeadTimeData?.length) {\r\n      setFormattedLeadTimeData(formatLeadTimeData(\"lead_time\"));\r\n      setFormattedCycleTimeData(formatLeadTimeData(\"cycle_time\"));\r\n      setFormattedLeadTimeForChangeData(\r\n        formatLeadTimeData(\"lead_time_for_changes\")\r\n      );\r\n      setTicketKeys(filteredLeadTimeData.map((item) => item.key));\r\n    } else {\r\n      setFormattedLeadTimeData([]);\r\n      setFormattedCycleTimeData([]);\r\n      setFormattedLeadTimeForChangeData([]);\r\n      setTicketKeys([]);\r\n    }\r\n  }, [filteredLeadTimeData, formatLeadTimeData, update]);\r\n\r\n  // SET AVERAGE\r\n  const generateAverageChart = useCallback(\r\n    (formattedData) => {\r\n      return timeperiodByDays.reduce((acc: number[][], day, i) => {\r\n        const dayDeployments = formattedData.filter(\r\n          (deployment: number[]) =>\r\n            deployment[0] >= day.start && deployment[0] <= day.end\r\n        );\r\n\r\n        const dayAverage = dayDeployments?.length\r\n          ? dayDeployments.reduce(\r\n              (accum: number, event: number[]) => accum + event[1],\r\n              0\r\n            ) / dayDeployments?.length\r\n          : null;\r\n\r\n        if (!dayAverage) {\r\n          if (i === timeperiodByDays?.length - 1 && acc?.length) {\r\n            return [...acc, [day.end, acc[acc.length - 1][1]]];\r\n          }\r\n          return acc;\r\n        }\r\n        if (!acc?.length) {\r\n          return [\r\n            ...acc,\r\n            [timeperiodByDays[0].start, dayAverage],\r\n            [day.end, dayAverage],\r\n          ];\r\n        }\r\n        return [...acc, [day.end, dayAverage]];\r\n      }, []);\r\n    },\r\n    [timeperiodByDays]\r\n  );\r\n\r\n  const formatChartAxisTime = useCallback((value: number) => {\r\n    const valueDuration: ValueDuration = moment.duration(value);\r\n    let formattedValue = \"0\";\r\n\r\n    if (value !== 0) {\r\n      if (valueDuration._data.months) {\r\n        formattedValue = `${Math.floor(valueDuration.asDays())}d`;\r\n      } else if (valueDuration._data.days) {\r\n        formattedValue = `${valueDuration._data.days}d ${\r\n          valueDuration._data.minutes >= 30\r\n            ? valueDuration._data.hours + 1\r\n            : valueDuration._data.hours\r\n        }h`;\r\n      } else if (valueDuration._data.hours) {\r\n        formattedValue = `${valueDuration._data.hours}h ${\r\n          valueDuration._data.seconds >= 30\r\n            ? valueDuration._data.minutes + 1\r\n            : valueDuration._data.minutes\r\n        }m`;\r\n      } else if (valueDuration._data.minutes) {\r\n        formattedValue = `${valueDuration._data.minutes}m ${\r\n          valueDuration._data.milliseconds >= 30\r\n            ? valueDuration._data.seconds + 1\r\n            : valueDuration._data.seconds\r\n        }s`;\r\n      } else if (valueDuration._data.seconds) {\r\n        formattedValue = `${\r\n          valueDuration._data.milliseconds >= 30\r\n            ? valueDuration._data.seconds + 1\r\n            : valueDuration._data.seconds\r\n        }s`;\r\n      }\r\n    }\r\n\r\n    return formattedValue;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // calculate average number per timepareiod\r\n    let avgCycleTime: string | null = null;\r\n    let avgLeadTime: string | null = null;\r\n    let avgLeadTimeForChange: string | null = null;\r\n\r\n    const totalCycleTime = formattedCycleTimeData?.length\r\n      ? formattedCycleTimeData.reduce((acc, item) => acc + item[1], 0)\r\n      : null;\r\n    const totalLeadTime = formattedLeadTimeData?.length\r\n      ? formattedLeadTimeData.reduce((acc, item) => acc + item[1], 0)\r\n      : null;\r\n\r\n    const totalLeadTimeForChange = formattedLeadTimeForChangeData?.length\r\n      ? formattedLeadTimeForChangeData.reduce((acc, item) => acc + item[1], 0)\r\n      : null;\r\n\r\n    if (totalCycleTime) {\r\n      avgCycleTime = formatChartAxisTime(\r\n        totalCycleTime / formattedCycleTimeData.length\r\n      );\r\n    }\r\n    if (totalLeadTime) {\r\n      avgLeadTime = formatChartAxisTime(\r\n        totalLeadTime / formattedLeadTimeData.length\r\n      );\r\n    }\r\n    if (totalLeadTimeForChange) {\r\n      avgLeadTimeForChange = formatChartAxisTime(\r\n        totalLeadTimeForChange / formattedLeadTimeForChangeData.length\r\n      );\r\n    }\r\n\r\n    setAverageCycleTime({\r\n      cycleTime: avgCycleTime,\r\n      leadTime: avgLeadTime,\r\n      leadTimeForChange: avgLeadTimeForChange,\r\n    });\r\n\r\n    // calculate average chart data (avarage for every day in the timeperiod)\r\n    setAverageCycleTimeChartData(generateAverageChart(formattedCycleTimeData));\r\n    setAverageLeadTimeChartData(generateAverageChart(formattedLeadTimeData));\r\n    setAverageLeadTimeForChangeChartData(\r\n      generateAverageChart(formattedLeadTimeForChangeData)\r\n    );\r\n  }, [\r\n    formattedLeadTimeData,\r\n    formattedCycleTimeData,\r\n    formattedLeadTimeForChangeData,\r\n    generateAverageChart,\r\n    formatChartAxisTime,\r\n  ]);\r\n\r\n  interface ValueDuration extends moment.Duration {\r\n    _data?: any;\r\n  }\r\n\r\n  if (reposState?.loading) {\r\n    return <Progress />;\r\n  } else if (reposState?.error) {\r\n    return <Alert severity=\"error\">{reposState?.error.message}</Alert>;\r\n  }\r\n\r\n  return (\r\n    <InfoCard title=\"DORA Metrics\">\r\n      <Grid container spacing={3} alignItems=\"stretch\">\r\n        <Grid item xs={4} lg={2}>\r\n          <InfoCard title=\"Repositories\">\r\n            {repositoriesFilter\r\n              .filter((repo: FilterRepo) => repo.isSelected)\r\n              .map((repo: FilterRepo) => (\r\n                <Chip\r\n                  label={repo.name}\r\n                  key={repo.url}\r\n                  size=\"small\"\r\n                  onDelete={() => handleRepoToggle(repo)}\r\n                />\r\n              ))}\r\n            {repositoriesFilter\r\n              .filter((repo: FilterRepo) => !repo.isSelected)\r\n              .map((repo: FilterRepo) => (\r\n                <Chip\r\n                  label={repo.name}\r\n                  key={repo.url}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  onClick={() => handleRepoToggle(repo)}\r\n                />\r\n              ))}\r\n          </InfoCard>\r\n        </Grid>\r\n        <Grid item xs={8} lg={10}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} lg={6}>\r\n              <AaDoraChart\r\n                timeperiod={timeperiod}\r\n                charts={chartsDeploymentFreq}\r\n                chartColor={[\"#3090B3\", \"#FFA1B5\"]}\r\n                chartHeight={360}\r\n                loading={deploymentFreqState.loading}\r\n                customPointFormatter={null}\r\n                customOptions={null}\r\n                yAxisFormatter={null}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} lg={6}>\r\n              <AaDoraChart\r\n                timeperiod={timeperiod}\r\n                charts={chartsLeadTime}\r\n                chartColor={[\"#FF6384\", \"#333333\"]}\r\n                yAxisFormatter={function (this: any) {\r\n                  const formattedValue: string = formatChartAxisTime(\r\n                    this.value\r\n                  );\r\n                  return `<span>${formattedValue}</span>`;\r\n                }}\r\n                chartHeight={360}\r\n                customPointFormatter={function (this: any) {\r\n                  const formattedValue = formatChartAxisTime(this.options.y);\r\n\r\n                  const keyIndex = formattedCycleTimeData.findIndex(\r\n                    (item) => item[0] === this.options.x\r\n                  );\r\n\r\n                  return `<span>${this.series.userOptions.name.replace(\r\n                    \"Deployments \",\r\n                    \"\"\r\n                  )}: ${formattedValue}</span><br/><span>${\r\n                    this.series.initialType === \"scatter\"\r\n                      ? `Ticket key: ${ticketKeys[keyIndex]}`\r\n                      : \"\"\r\n                  }`;\r\n                }}\r\n                loading={leadTimeState.loading}\r\n                customOptions={null}\r\n                setUpdate={setUpdate}\r\n                update={update}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </InfoCard>\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { LinearGauge } from '@backstage/core-components';\r\nimport {\r\n  Collapse,\r\n  Grid,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from '@material-ui/core';\r\nimport KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowDown from '@material-ui/icons/KeyboardArrowDown';\r\nimport { RowFormattedTicket, Ticket, Timeperiod } from '../../api/types';\r\nimport { getUniqueListByParent } from '../../helpers';\r\n\r\nexport const AaSprintInsightsTable = ({\r\n  timeperiod,\r\n  tickets,\r\n}: {\r\n  timeperiod: Timeperiod;\r\n  tickets: Ticket[];\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const latestTasksWithUniqueParent = getUniqueListByParent(tickets).sort(\r\n    (a, b) => b.timestamp - a.timestamp,\r\n  );\r\n\r\n  const parentTaskWithSubTasks: Ticket[] = latestTasksWithUniqueParent.map(\r\n    uniqueTask => {\r\n      // if parent task wasn`t updated in the time period, display latest subtask hours & timestam as tasks group`s parent\r\n      let parentTaskWithLatestTimestamp = { ...uniqueTask, isParent: true };\r\n\r\n      // check if parent task of the uniqueTask was updated in the time period\r\n      const parentTasksUpdates = tickets\r\n        .filter(task => task.key === uniqueTask.parent.key)\r\n        .sort((a, b) => b.timestamp - a.timestamp);\r\n\r\n      if (parentTasksUpdates.length) {\r\n        // pick latest parent task update\r\n        const parentTask = parentTasksUpdates[0];\r\n\r\n        // if parent task was modifified, display it as tasks group`s parent, but with latest subtask timestamp\r\n        parentTaskWithLatestTimestamp = {\r\n          ...parentTask,\r\n          timestamp: uniqueTask.timestamp,\r\n          isParent: true,\r\n        };\r\n      }\r\n\r\n      const allSubtasks = tickets.filter(\r\n        task => task.parent.key === uniqueTask.parent.key,\r\n      );\r\n\r\n      return { ...parentTaskWithLatestTimestamp, subtasks: [...allSubtasks] };\r\n    },\r\n  );\r\n\r\n  const formattedTableData = parentTaskWithSubTasks.map(ticket => {\r\n    const formattedTicket = {\r\n      'date event': ticket.timestamp,\r\n      'transition from': ticket.transition_from,\r\n      'transition to': ticket.transition_to,\r\n      sprint: ticket.sprint ?? '',\r\n      'ticket key': ticket.key,\r\n      type: ticket.type,\r\n      summary: ticket.summary,\r\n      hours: ticket.hours,\r\n      label:\r\n        ticket.parent.label\r\n          .split(' ')\r\n          .map(word => word[0].toUpperCase() + word.slice(1))\r\n          .join(' ') ?? '',\r\n      confidence: +ticket.parent.predictions[0].value,\r\n      subtasks: ticket?.subtasks?.length\r\n        ? ticket.subtasks.map(subtask => {\r\n            return {\r\n              'date event': subtask.timestamp,\r\n              'transition from': subtask.transition_from,\r\n              'transition to': subtask.transition_to,\r\n              sprint: subtask.sprint ?? '',\r\n              'ticket key': subtask.key,\r\n              type: subtask.type,\r\n              summary: subtask.summary,\r\n              hours: subtask.hours,\r\n              label: '',\r\n              confidence: +ticket.parent.predictions[0].value,\r\n            };\r\n          })\r\n        : null,\r\n    };\r\n    return formattedTicket;\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <TableContainer>\r\n        <Table aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"normal\" />\r\n              <TableCell padding=\"none\">Date Event</TableCell>\r\n              <TableCell padding=\"normal\">From</TableCell>\r\n              <TableCell padding=\"none\">To</TableCell>\r\n              <TableCell padding=\"normal\">Sprint</TableCell>\r\n              <TableCell padding=\"none\">Ticket key</TableCell>\r\n              <TableCell padding=\"normal\">Type</TableCell>\r\n              <TableCell padding=\"none\" size=\"medium\">\r\n                Description\r\n              </TableCell>\r\n              <TableCell padding=\"normal\">Hours</TableCell>\r\n              <TableCell padding=\"none\">Label</TableCell>\r\n              <TableCell padding=\"normal\">Confidence</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {formattedTableData\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, i) => (\r\n                <Row key={row['date event']} row={row} />\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={formattedTableData.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nfunction Row(props: { row: RowFormattedTicket }) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow>\r\n        <TableCell style={{ width: '3%', paddingTop: 4, paddingBottom: 4 }}>\r\n          <IconButton\r\n            // aria-label=\"expand row\"\r\n\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell\r\n          padding=\"none\"\r\n          component=\"th\"\r\n          scope=\"row\"\r\n          style={{ width: '10%', paddingTop: 4, paddingBottom: 4 }}\r\n        >\r\n          {row['date event']}\r\n        </TableCell>\r\n        <TableCell style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}>\r\n          {row['transition from']}\r\n        </TableCell>\r\n        <TableCell\r\n          style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n          padding=\"none\"\r\n        >\r\n          {row['transition to']}\r\n        </TableCell>\r\n        <TableCell style={{ width: '8%', paddingTop: 4, paddingBottom: 4 }}>\r\n          {row.sprint}\r\n        </TableCell>\r\n        <TableCell\r\n          style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n          padding=\"none\"\r\n        >\r\n          {row['ticket key']}\r\n        </TableCell>\r\n        <TableCell style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}>\r\n          {row.type}\r\n        </TableCell>\r\n        <TableCell\r\n          style={{ width: '30%', paddingTop: 4, paddingBottom: 4 }}\r\n          padding=\"none\"\r\n          size=\"medium\"\r\n        >\r\n          {row.summary}\r\n        </TableCell>\r\n        <TableCell style={{ width: '5%', paddingTop: 4, paddingBottom: 4 }}>\r\n          {row.hours}\r\n        </TableCell>\r\n        <TableCell\r\n          style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n          padding=\"none\"\r\n        >\r\n          {row.label}\r\n        </TableCell>\r\n        <TableCell style={{ width: '9%', paddingTop: 4, paddingBottom: 4 }}>\r\n          <LinearGauge value={row.confidence} />\r\n        </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell\r\n          style={{\r\n            paddingBottom: 0,\r\n            paddingTop: 0,\r\n            paddingLeft: 0,\r\n            paddingRight: 0,\r\n          }}\r\n          colSpan={12}\r\n        >\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Table>\r\n              <TableBody>\r\n                {row?.subtasks?.map((subtask: any) => (\r\n                  <TableRow key={subtask['ticket key']}>\r\n                    <TableCell\r\n                      style={{ width: '3%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      <div style={{ width: 48, opacity: 0 }}> test</div>\r\n                    </TableCell>\r\n                    {/* <TableCell style={{ width: '3%' }} /> */}\r\n                    <TableCell\r\n                      style={{ width: '10%', paddingTop: 4, paddingBottom: 4 }}\r\n                      padding=\"none\"\r\n                      component=\"th\"\r\n                      scope=\"row\"\r\n                    >\r\n                      {subtask['date event']}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      {subtask['transition from']}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n                      padding=\"none\"\r\n                    >\r\n                      {subtask['transition to']}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '8%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      {subtask.sprint}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n                      padding=\"none\"\r\n                    >\r\n                      {subtask['ticket key']}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      {subtask.type}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '30%', paddingTop: 4, paddingBottom: 4 }}\r\n                      padding=\"none\"\r\n                      size=\"medium\"\r\n                    >\r\n                      {subtask.summary}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '5%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      {subtask.hours}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '7%', paddingTop: 4, paddingBottom: 4 }}\r\n                      padding=\"none\"\r\n                    >\r\n                      {row.label}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      style={{ width: '9%', paddingTop: 4, paddingBottom: 4 }}\r\n                    >\r\n                      <LinearGauge value={row.confidence} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","/* eslint-disable no-console */\r\nimport React from \"react\";\r\nimport { GaugeCard, InfoCard, Progress } from \"@backstage/core-components\";\r\nimport { configApiRef, useApi } from \"@backstage/core-plugin-api\";\r\nimport useAsync from \"react-use/lib/useAsync\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Timeperiod } from \"../../api/types\";\r\nimport { agileAnalyticsApiRef } from \"../../api\";\r\nimport { AaSprintInsightsTable } from \"../AaSprintInsightsTable\";\r\n\r\nexport const AaSprintInsightsPage = ({\r\n  timeperiod,\r\n}: {\r\n  timeperiod: Timeperiod;\r\n}) => {\r\n  const api = useApi(agileAnalyticsApiRef);\r\n  const config = useApi(configApiRef);\r\n  const orgHash = config.getString(\"agileAnalytics.orgHash\");\r\n  const apiKey = config.getString(\"agileAnalytics.apiKey\");\r\n\r\n  const siState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getSiData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  if (siState?.loading) {\r\n    return <Progress />;\r\n  } else if (siState?.error) {\r\n    return <Alert severity=\"error\">{siState?.error.message}</Alert>;\r\n  }\r\n\r\n  const ticketsTotal: number =\r\n    siState.value.featuresAmount + siState.value.notFeaturesAmount;\r\n  const featuresPart = siState.value.featuresAmount / ticketsTotal;\r\n  const notFeaturesPart = siState.value.notFeaturesAmount / ticketsTotal;\r\n\r\n  const timeTotal: number =\r\n    siState.value.featuresTime + siState.value.notFeaturesTime;\r\n  const featuresTimePart = siState.value.featuresTime / timeTotal;\r\n  const notFeaturesTimePart = siState.value.notFeaturesTime / timeTotal;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item>\r\n        <InfoCard\r\n          title=\"Feature - not feature\"\r\n          subheader=\"How many features and not-feature tasks are in development\"\r\n        >\r\n          <Grid container spacing={2}>\r\n            <Grid item>\r\n              <GaugeCard\r\n                title=\"Features\"\r\n                progress={featuresPart}\r\n                description={`${siState.value.featuresAmount} tickets`}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <GaugeCard\r\n                title=\"Not features\"\r\n                progress={notFeaturesPart}\r\n                description={`${siState.value.notFeaturesAmount} tickets`}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </InfoCard>\r\n      </Grid>\r\n      <Grid item>\r\n        <InfoCard\r\n          title=\"Time spent\"\r\n          subheader=\"How much time were spent on features and not-feature tasks\"\r\n        >\r\n          <Grid container spacing={2}>\r\n            <Grid item>\r\n              <GaugeCard\r\n                title=\"Features\"\r\n                progress={featuresTimePart}\r\n                description={`${siState.value.featuresTime} hours spent`}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <GaugeCard\r\n                title=\"Not features\"\r\n                progress={notFeaturesTimePart}\r\n                description={`${siState.value.notFeaturesTime} hours spent`}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </InfoCard>\r\n      </Grid>\r\n      <AaSprintInsightsTable\r\n        timeperiod={timeperiod}\r\n        tickets={siState.value.tickets}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React from \"react\";\r\nimport moment from \"moment\";\r\nimport { GaugeCard, InfoCard, Progress } from \"@backstage/core-components\";\r\nimport { configApiRef, useApi } from \"@backstage/core-plugin-api\";\r\nimport useAsync from \"react-use/lib/useAsync\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Timeperiod } from \"../../api/types\";\r\nimport { agileAnalyticsApiRef } from \"../../api\";\r\nimport { AaDoraChart } from \"../AaDoraChart\";\r\n\r\nexport const AaStockPage = ({ timeperiod }: { timeperiod: Timeperiod }) => {\r\n  const api = useApi(agileAnalyticsApiRef);\r\n  const config = useApi(configApiRef);\r\n  const orgHash = config.getString(\"agileAnalytics.orgHash\");\r\n  const apiKey = config.getString(\"agileAnalytics.apiKey\");\r\n\r\n  const stockState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getStockData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  const riskChartState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getRiskChartData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  console.log(riskChartState);\r\n\r\n  const createChartSeriesFromData = () => {\r\n    const getLabels = (buckets: any) => {\r\n      if (!buckets) {\r\n        return [];\r\n      }\r\n      const labels: number[] = [];\r\n\r\n      const timestamps = Object.keys(buckets);\r\n      if (!timestamps.length) {\r\n        return [];\r\n      }\r\n      timestamps.forEach((item) => {\r\n        const start_date = moment(item).unix();\r\n        labels.push(start_date);\r\n      });\r\n\r\n      return labels;\r\n    };\r\n\r\n    const series = stockState?.value\r\n      ? Object.keys(stockState?.value)\r\n          .filter((item) => item !== \"buckets\")\r\n          .reduce((acc: { name: string; data: number[][] }[], item) => {\r\n            const formatted = {\r\n              name: item,\r\n              data: getLabels(stockState.value?.buckets).map((date, i) => [\r\n                date * 1000,\r\n                stockState.value[item][i]?.avg_branch_total_modified_lines,\r\n              ]),\r\n              type: \"column\",\r\n            };\r\n            return [...acc, formatted];\r\n          }, [])\r\n      : [];\r\n\r\n    return series;\r\n  };\r\n\r\n  const createRiskChartSeriesFromData = () => {\r\n    if (!riskChartState?.value) {\r\n      return [];\r\n    }\r\n    const series = [\r\n      {\r\n        name: \"\",\r\n        data: Object.entries(riskChartState?.value).map((entry) => {\r\n          return [entry[0][0].toUpperCase() + entry[0].slice(1), entry[1]];\r\n        }),\r\n        type: \"pie\",\r\n      },\r\n    ];\r\n    return series;\r\n  };\r\n\r\n  const chartOptions = [\r\n    {\r\n      series: createChartSeriesFromData(),\r\n    },\r\n  ];\r\n\r\n  const riskChartOptions = [\r\n    {\r\n      series: createRiskChartSeriesFromData(),\r\n    },\r\n  ];\r\n\r\n  if (stockState?.loading) {\r\n    return <Progress />;\r\n  } else if (stockState?.error) {\r\n    return <Alert severity=\"error\">{stockState?.error.message}</Alert>;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} lg={8}>\r\n        <InfoCard title=\"Stock\">\r\n          <AaDoraChart\r\n            timeperiod={timeperiod}\r\n            charts={chartOptions}\r\n            chartColor={[\r\n              \"#15a2bb\",\r\n              \"#54afc4\",\r\n              \"#79bccd\",\r\n              \"#99c9d6\",\r\n              \"#b7d6df\",\r\n              \"#d4e3e8\",\r\n              \"#f1f1f1\",\r\n              \"#f7dbde\",\r\n              \"#fcc5cb\",\r\n              \"#ffaeb9\",\r\n              \"#ff97a7\",\r\n              \"#ff7e95\",\r\n              \"#ff6384\",\r\n            ]}\r\n            // chartHeight={360}\r\n            loading={stockState.loading}\r\n            customPointFormatter={null}\r\n            customOptions={null}\r\n            yAxisFormatter={null}\r\n            yAxisTitle=\"Average number of modified lines\"\r\n            customOpacity={1}\r\n          />\r\n        </InfoCard>\r\n      </Grid>\r\n      <Grid item xs={12} lg={4}>\r\n        <InfoCard\r\n          title=\"Risk Chart\"\r\n          deepLink={{\r\n            title: \"Go to Agile Analytics to see a detailed report  \",\r\n            link: \"https://www.prod.agileanalytics.cloud/stock\",\r\n          }}\r\n        >\r\n          {riskChartState.error ? (\r\n            <Alert severity=\"error\">{riskChartState?.error.message}</Alert>\r\n          ) : null}\r\n          <AaDoraChart\r\n            timeperiod={timeperiod}\r\n            charts={riskChartOptions}\r\n            chartColor={[\"#92CE52\", \"#F8C238\", \"#E11E1E\"]}\r\n            loading={riskChartState.loading}\r\n            customPointFormatter={function (this: any) {\r\n              return `<span>Branches amount: <b>${this.options.y}</b></span>`;\r\n            }}\r\n            customOptions={null}\r\n            yAxisFormatter={null}\r\n            customOpacity={1}\r\n          />\r\n        </InfoCard>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React from \"react\";\r\nimport moment from \"moment\";\r\nimport { GaugeCard, InfoCard, Progress } from \"@backstage/core-components\";\r\nimport { configApiRef, useApi } from \"@backstage/core-plugin-api\";\r\nimport useAsync from \"react-use/lib/useAsync\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { LeaksStatisticsItem, Timeperiod } from \"../../api/types\";\r\nimport { agileAnalyticsApiRef } from \"../../api\";\r\nimport { AaDoraChart } from \"../AaDoraChart\";\r\n\r\nexport const AaLeaksPage = ({ timeperiod }: { timeperiod: Timeperiod }) => {\r\n  const api = useApi(agileAnalyticsApiRef);\r\n  const config = useApi(configApiRef);\r\n  const orgHash = config.getString(\"agileAnalytics.orgHash\");\r\n  const apiKey = config.getString(\"agileAnalytics.apiKey\");\r\n\r\n  const leaksState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getLeaksData({\r\n      orgHash,\r\n      apiKey,\r\n      dateStart: timeperiod?.date_start,\r\n      dateEnd: timeperiod?.date_end,\r\n    });\r\n    return response;\r\n  }, [timeperiod]);\r\n\r\n  const chartOptions = [\r\n    {\r\n      series: [\r\n        {\r\n          name: \"All leakes\",\r\n          data: leaksState?.value?.statistics?.length\r\n            ? leaksState.value.statistics.map((item: LeaksStatisticsItem) => {\r\n                return [moment(item.date).unix() * 1000, item.leaks_quantity];\r\n              })\r\n            : [],\r\n        },\r\n        {\r\n          name: \"Solved\",\r\n          data: leaksState?.value?.statistics?.length\r\n            ? leaksState.value.statistics.map((item: LeaksStatisticsItem) => {\r\n                return [moment(item.date).unix() * 1000, item.leaks_fixed];\r\n              })\r\n            : [],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  if (leaksState?.loading) {\r\n    return <Progress />;\r\n  } else if (leaksState?.error) {\r\n    return <Alert severity=\"error\">{leaksState?.error.message}</Alert>;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <InfoCard\r\n          title=\"Leaks\"\r\n          deepLink={{\r\n            title: \"Go to Agile Analytics to see a detailed report  \",\r\n            link: \"https://www.prod.agileanalytics.cloud/leaks\",\r\n          }}\r\n        >\r\n          <AaDoraChart\r\n            timeperiod={timeperiod}\r\n            charts={chartOptions}\r\n            chartColor={[\"#FF6384\", \"#15A2BB\"]}\r\n            loading={leaksState.loading}\r\n            customPointFormatter={null}\r\n            customOptions={null}\r\n            yAxisFormatter={null}\r\n            yAxisTitle=\"Leaks amount\"\r\n            customOpacity={1}\r\n            isMarker={false}\r\n            isStacking={false}\r\n          />\r\n        </InfoCard>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from \"react\";\r\nimport { Grid, Link } from \"@material-ui/core\";\r\nimport {\r\n  Content,\r\n  InfoCard,\r\n  StructuredMetadataTable,\r\n  Tabs,\r\n} from \"@backstage/core-components\";\r\nimport { OrganisationDataResponse } from \"../../api/types\";\r\nimport { AaTimeSelect } from \"../AaTimeSelect\";\r\nimport { getEndDate, getStartDate } from \"../../helpers\";\r\nimport { AaDoraPage } from \"../AaDoraPage\";\r\nimport { AaSprintInsightsPage } from \"../AaSprintInsightsPage\";\r\nimport { AaStockPage } from \"../AaStockPage\";\r\nimport { AaLeaksPage } from \"../AaLeaksPage\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nexport const AaContentComponent = ({\r\n  orgData,\r\n}: {\r\n  orgData: OrganisationDataResponse;\r\n}) => {\r\n  const [timeperiod, setTimeperiod] = useState({\r\n    date_start: getStartDate(6, \"days\"),\r\n    date_end: getEndDate(),\r\n    label: \"Last 7 days\",\r\n    value: \"7days\",\r\n  });\r\n\r\n  const overviewMetadata = {\r\n    \"Organisation hash\": orgData.orgHash,\r\n    \"Organisation name\": orgData.orgName,\r\n    \"Number of users\": orgData.usersNumber,\r\n    Status: orgData.status,\r\n    Subscription: orgData.subscription,\r\n  };\r\n\r\n  const cardContentStyle = { heightX: 200, width: 600 };\r\n  const tabs = [\r\n    {\r\n      label: \"OVERVIEW\",\r\n      content: (\r\n        <Grid container spacing={3} direction=\"column\" style={cardContentStyle}>\r\n          <Grid item>\r\n            <InfoCard title=\"Organisation's Details\">\r\n              <StructuredMetadataTable metadata={overviewMetadata} />\r\n            </InfoCard>\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    {\r\n      label: \"SPRINT INSIGHTS\",\r\n      content: (\r\n        <Grid container spacing={3} direction=\"column\">\r\n          <Grid item>\r\n            {orgData?.subscription === \"enterprise-plus\" ? (\r\n              <AaSprintInsightsPage timeperiod={timeperiod} />\r\n            ) : (\r\n              renderUpgradeWarning()\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    {\r\n      label: \"DORA\",\r\n      content: (\r\n        <Grid container spacing={3} direction=\"column\">\r\n          <Grid item>\r\n            {orgData?.subscription === \"enterprise-plus\" ? (\r\n              <AaDoraPage timeperiod={timeperiod} />\r\n            ) : (\r\n              renderUpgradeWarning()\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    {\r\n      label: \"STOCK\",\r\n      content: (\r\n        <Grid container spacing={3} direction=\"column\">\r\n          <Grid item>\r\n            {orgData?.subscription === \"enterprise-plus\" ? (\r\n              <AaStockPage timeperiod={timeperiod} />\r\n            ) : (\r\n              renderUpgradeWarning()\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    {\r\n      label: \"LEAKS\",\r\n      content: (\r\n        <Grid container spacing={3} direction=\"column\">\r\n          <Grid item>\r\n            {orgData?.subscription === \"enterprise-plus\" ? (\r\n              <AaLeaksPage timeperiod={timeperiod} />\r\n            ) : (\r\n              renderUpgradeWarning()\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  function renderUpgradeWarning() {\r\n    return (\r\n      <Alert severity=\"warning\">\r\n        Agile Analytics Backstage.io intagration available only for Enterprise+\r\n        organisations.{\" \"}\r\n        <Link\r\n          href=\"https://www.prod.agileanalytics.cloud/settings/organisation\"\r\n          underline=\"always\"\r\n          color=\"inherit\"\r\n        >\r\n          Upgrade your plan\r\n        </Link>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Grid container spacing={3} direction=\"column\">\r\n        <Grid item>\r\n          <AaTimeSelect timeperiod={timeperiod} setTimeperiod={setTimeperiod} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Tabs tabs={tabs} />\r\n        </Grid>\r\n      </Grid>\r\n    </Content>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport {\r\n  InfoCard,\r\n  Header,\r\n  Page,\r\n  Content,\r\n  ContentHeader,\r\n  HeaderLabel,\r\n  SupportButton,\r\n  Progress,\r\n} from '@backstage/core-components';\r\nimport { ExampleFetchComponent } from '../ExampleFetchComponent';\r\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\r\nimport { agileAnalyticsApiRef } from '../../api';\r\nimport useAsync from 'react-use/lib/useAsync';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AaContentComponent } from '../AaContentComponent';\r\n\r\nexport const AaMainComponent = () => {\r\n  const api = useApi(agileAnalyticsApiRef);\r\n  const config = useApi(configApiRef);\r\n  const orgHash = config.getString('agileAnalytics.orgHash');\r\n  const apiKey = config.getString('agileAnalytics.apiKey');\r\n\r\n  const organisationState = useAsync(async (): Promise<any> => {\r\n    const response = await api.getOrganisationData({\r\n      orgHash,\r\n      apiKey,\r\n    });\r\n    return response;\r\n  }, []);\r\n\r\n  return (\r\n    <Page themeId=\"tool\">\r\n      <Header\r\n        // title=\"Agile Analytics\"\r\n        title={\r\n          organisationState?.value?.orgName\r\n            ? organisationState.value.orgName.trim()\r\n            : 'Agile Analytics'\r\n        }\r\n        subtitle={`${\r\n          organisationState?.value?.orgName\r\n            ? organisationState.value.orgName.trim()\r\n            : 'Your company'\r\n        }'s essential metrics from Agile Analytics`}\r\n      >\r\n        <HeaderLabel label=\"Owner\" value=\"Zen Software\" />\r\n        <HeaderLabel label=\"Lifecycle\" value=\"Alpha\" />\r\n      </Header>\r\n      {organisationState?.loading ? <Progress /> : null}\r\n      {organisationState?.error ? (\r\n        <Alert severity=\"error\">{organisationState?.error.message}</Alert>\r\n      ) : null}\r\n      {!organisationState.loading && !organisationState.error ? (\r\n        <AaContentComponent orgData={organisationState?.value} />\r\n      ) : null}\r\n    </Page>\r\n  );\r\n};\r\n"],"names":["_a","_b","Alert"],"mappings":";;;;;;;;;;;;;;;AAMO,MAAM,eAAe,CAAC;AAAA,EAC3B,UAAA;AAAA,EACA,aAAA;AACF,CAGM,KAAA;AACJ,EAAA,MAAM,UAAa,GAAA;AAAA,IACjB;AAAA,MACE,UAAA,EAAY,YAAa,CAAA,CAAA,EAAG,MAAM,CAAA;AAAA,MAClC,UAAU,UAAW,EAAA;AAAA,MACrB,KAAO,EAAA,aAAA;AAAA,MACP,KAAO,EAAA,OAAA;AAAA,KACT;AAAA,IACA;AAAA,MACE,UAAA,EAAY,YAAa,CAAA,EAAA,EAAI,MAAM,CAAA;AAAA,MACnC,UAAU,UAAW,EAAA;AAAA,MACrB,KAAO,EAAA,cAAA;AAAA,MACP,KAAO,EAAA,QAAA;AAAA,KACT;AAAA,IACA;AAAA,MACE,UAAA,EAAY,YAAa,CAAA,CAAA,EAAG,QAAQ,CAAA;AAAA,MACpC,UAAU,UAAW,EAAA;AAAA,MACrB,KAAO,EAAA,eAAA;AAAA,MACP,KAAO,EAAA,SAAA;AAAA,KACT;AAAA,IACA;AAAA,MACE,UAAA,EAAY,YAAa,CAAA,CAAA,EAAG,QAAQ,CAAA;AAAA,MACpC,UAAU,UAAW,EAAA;AAAA,MACrB,KAAO,EAAA,eAAA;AAAA,MACP,KAAO,EAAA,SAAA;AAAA,KACT;AAAA,GACF,CAAA;AAEA,EAAA,SAAS,uBAAuB,KAAe,EAAA;AAC7C,IAAA,MAAM,oBAAoB,UAAW,CAAA,IAAA,CAAK,CAAU,MAAA,KAAA,MAAA,CAAO,UAAU,KAAK,CAAA,CAAA;AAC1E,IAAA,IAAI,iBAAmB,EAAA;AACrB,MAAA,aAAA,CAAc,iBAAiB,CAAA,CAAA;AAAA,KACjC;AAAA,GACF;AAEA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IACC,KAAM,EAAA,YAAA;AAAA,IACN,KAAO,EAAA,UAAA;AAAA,IACP,QAAS,EAAA,OAAA;AAAA,IACT,QAAU,EAAA,CAAA,CAAA,KAAK,sBAAuB,CAAA,CAAA,CAAE,UAAU,CAAA;AAAA,GACpD,CAAA,CAAA;AAEJ,CAAA;;AC/CO,MAAM,cAAc,CAAC;AAAA,EAC1B,UAAA;AAAA,EACA,MAAA;AAAA,EACA,UAAa,GAAA,IAAA;AAAA,EACb,aAAA;AAAA,EACA,oBAAA;AAAA,EACA,SAAY,GAAA,QAAA;AAAA,EACZ,WAAc,GAAA,SAAA;AAAA,EACd,cAAA;AAAA,EACA,WAAA;AAAA,EACA,OAAU,GAAA,KAAA;AAAA,EACV,SAAY,GAAA,EAAA;AAAA,EACZ,UAAA;AAAA,EACA,aAAA;AAAA,EACA,QAAW,GAAA,IAAA;AAAA,EACX,UAAa,GAAA,IAAA;AAAA,EACb,SAAY,GAAA,IAAA;AAAA,EACZ,MAAS,GAAA,CAAA;AACX,CAkBM,KAAA;AA5CN,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA8CE,EAAM,MAAA,EAAE,QAAU,EAAA,UAAA,EAAe,GAAA,UAAA,CAAA;AACjC,EAAA,MAAM,CAAC,iBAAA,EAAmB,oBAAoB,CAAA,GAAI,QAG/C,CAAA;AAAA,IACD,MAAQ,EAAA,WAAA;AAAA,GACT,CAAA,CAAA;AAED,EAAA,MAAM,CAAC,OAAA,EAAS,UAAU,CAAA,GAAI,QAI3B,CAAA;AAAA,IACD,MAAQ,EAAA,KAAA;AAAA,IACR,YAAc,EAAA,4DAAA;AAAA,GACf,CAAA,CAAA;AACD,EAAA,MAAM,CAAC,aAAA,EAAe,gBAAgB,CAAA,GAAI,SAAc,IAAI,CAAA,CAAA;AAE5D,EAAA,MAAM,CAAC,eAAA,EAAiB,kBAAkB,CAAA,GAAI,SAAkB,KAAK,CAAA,CAAA;AAErE,EAAA,SAAA,CAAU,MAAM;AAlElB,IAAAA,IAAAA,GAAAA,CAAAA;AAmEI,IAAK,IAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,MAAQ,EAAA,MAAA,KAAW,CAAI,EAAA;AAClC,MAAA,MAAM,SAAY,GAAA;AAAA,QAChB,GAAG,MAAO,CAAA,CAAA,CAAA;AAAA,QACV,QAAQ,YAAaA,CAAAA,CAAAA,GAAAA,GAAA,OAAO,CAAP,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAW,MAAM,CAAA;AAAA,OACxC,CAAA;AACA,MAAA,gBAAA,CAAiB,SAAS,CAAA,CAAA;AAAA,KAC5B;AAAA,GACC,EAAA,CAAC,MAAQ,EAAA,MAAM,CAAC,CAAA,CAAA;AAEnB,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAqB,oBAAA,CAAA,EAAE,SAAW,EAAA,cAAA,EAAgB,CAAA,CAAA;AAAA,KAC7C,MAAA;AACL,MAAqB,oBAAA,CAAA;AAAA,QACnB,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAAA,GACC,EAAA,CAAC,cAAgB,EAAA,WAAW,CAAC,CAAA,CAAA;AAEhC,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,oBAAsB,EAAA;AACxB,MAAA,UAAA,CAAW,CAAa,SAAA,KAAA;AACtB,QAAA,OAAO,EAAE,GAAG,SAAW,EAAA,cAAA,EAAgB,oBAAqB,EAAA,CAAA;AAAA,OAC7D,CAAA,CAAA;AAAA,KACI,MAAA;AACL,MAAW,UAAA,CAAA;AAAA,QACT,MAAQ,EAAA,IAAA;AAAA,QACR,YACE,EAAA,4DAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAG,CAAC,oBAAoB,CAAC,CAAA,CAAA;AAEzB,EAAA,MAAM,aAAgB,GAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,GAAI,CAAA,CAAC,UAAqB,KAAM,CAAA,KAAA,CAAA,CAAA;AAE9D,EAAA,MAAM,OAA8B,GAAA;AAAA,IAClC,MAAQ,EAAA,UAAA,IAAA,IAAA,GAAA,UAAA,GAAc,CAAC,SAAA,EAAW,WAAW,SAAS,CAAA;AAAA,IACtD,KAAO,EAAA;AAAA,MACL,MAAQ,EAAA,WAAA;AAAA,KACV;AAAA,IACA,KAAO,EAAA;AAAA,MACL,IAAM,EAAA,EAAA;AAAA,KACR;AAAA,IACA,KAAO,EAAA;AAAA,MACL,MAAQ,EAAA,iBAAA;AAAA,MACR,IAAM,EAAA,SAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,MAAM,UAAc,IAAA,IAAA,GAAA,UAAA,GAAA,EAAA;AAAA,OACtB;AAAA,MACA,GAAK,EAAA,CAAA;AAAA,KACP;AAAA,IACA,KAAO,EAAA;AAAA,MACL,IAAM,EAAA,UAAA;AAAA,MACN,MAAQ,EAAA;AAAA,QACN,MAAQ,EAAA,eAAA;AAAA,QACR,KAAO,EAAA,OAAA;AAAA,OACT;AAAA,MACA,aAAe,EAAA,CAAA;AAAA,MACf,KAAK,UAAa,GAAA,GAAA;AAAA,MAClB,KAAK,QAAW,GAAA,GAAA;AAAA,KAClB;AAAA,IACA,OAAS,EAAA;AAAA,MACP,OAAS,EAAA,KAAA;AAAA,KACX;AAAA,IACA,OAAA;AAAA,IACA,WAAa,EAAA;AAAA,MACX,MAAQ,EAAA;AAAA,QACN,SAAS,aAAiB,IAAA,IAAA,GAAA,aAAA,GAAA,GAAA;AAAA,QAC1B,cAAgB,EAAA,KAAA;AAAA,QAChB,MAAQ,EAAA;AAAA,UACN,UAAU,WAAY;AACpB,YAAK,IAAA,CAAA,KAAA,CAAM,QAAQ,IAAK,EAAA,CAAA;AAAA,WAC1B;AAAA,SACF;AAAA,OACF;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,QAAA,EAAU,aAAa,QAAW,GAAA,KAAA,CAAA;AAAA,QAClC,MAAQ,EAAA;AAAA,UACN,OAAS,EAAA,QAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,OAAS,EAAA,QAAA;AAAA,aACX;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,QAAA,EAAU,aAAa,QAAW,GAAA,KAAA,CAAA;AAAA,QAClC,UAAY,EAAA;AAAA,UACV,OAAS,EAAA,IAAA;AAAA,SACX;AAAA,OACF;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,MAAQ,EAAA;AAAA,UACN,OAAS,EAAA,KAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,OAAS,EAAA,KAAA;AAAA,aACX;AAAA,WACF;AAAA,SACF;AAAA,QACA,MAAQ,EAAA,CAAA,EAAA;AAAA,QACR,SAAW,EAAA,CAAA;AAAA,OACb;AAAA,MACA,OAAS,EAAA;AAAA,QACP,MAAQ,EAAA;AAAA,UACN,MAAQ,EAAA,CAAA;AAAA,SACV;AAAA,OACF;AAAA,MACA,GAAK,EAAA;AAAA,QACH,gBAAkB,EAAA,IAAA;AAAA,QAClB,MAAQ,EAAA,SAAA;AAAA,QACR,UAAY,EAAA;AAAA,UACV,OAAS,EAAA,IAAA;AAAA,UACT,MAAQ,EAAA,+CAAA;AAAA,SACV;AAAA,OACF;AAAA,KACF;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,OAAS,EAAA,IAAA;AAAA,KACX;AAAA,IACA,MAAA,EAAA,CAAQ,EAAe,GAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,MAAA,KAAf,IAAyB,GAAA,EAAA,GAAA,CAAC,EAAE,IAAA,EAAM,CAAC,IAAA,EAAM,IAAI,CAAA,EAAG,CAAA;AAAA,GAC1D,CAAA;AAEA,EAAA,SAAS,aAAa,MAAsB,EAAA;AAC1C,IAAO,OAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,GAAI,CAAA,CAAC,KAAsB,KAAA;AAhM9C,MAAA,IAAAA,GAAAC,EAAAA,GAAAA,CAAAA;AAiMM,MAAO,OAAA;AAAA,QACL,IAAMD,EAAAA,CAAAA,GAAAA,GAAA,KAAM,CAAA,IAAA,KAAN,OAAAA,GAAc,GAAA,EAAA;AAAA,QACpB,MAAM,KAAM,CAAA,IAAA;AAAA,QACZ,IAAMC,EAAAA,CAAAA,GAAAA,GAAA,KAAM,CAAA,IAAA,KAAN,OAAAA,GAAc,GAAA,MAAA;AAAA,QACpB,cAAgB,EAAA,KAAA;AAAA,OAClB,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACF;AAEA,EAAA,SAAS,kBAAkB,KAAe,EAAA;AACxC,IAAA,IAAI,SAAW,EAAA;AACb,MAAU,SAAA,CAAA,CAAA,SAAA,KAAa,YAAY,CAAC,CAAA,CAAA;AAAA,KACtC;AACA,IAAA,MAAM,WAAW,MAAO,CAAA,IAAA;AAAA,MACtB,CAAC,KAAA,KAAqB,KAAM,CAAA,KAAA,CAAM,KAAU,KAAA,KAAA;AAAA,KAC9C,CAAA;AAEA,IAAA,IAAI,QAAU,EAAA;AACZ,MAAiB,gBAAA,CAAA;AAAA,QACf,GAAG,QAAA;AAAA,QACH,MAAA,EAAQ,YAAa,CAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,MAAM,CAAA;AAAA,OACtC,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAEA,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,eACE,EAAO,GAAA,CAAA,EAAA,GAAA,MAAA,CAAA,CAAA,CAAA,KAAP,mBAAW,KAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAkB,yBAChB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,KAAO,EAAA;AAAA,MACL,OAAS,EAAA,MAAA;AAAA,MACT,cAAgB,EAAA,eAAA;AAAA,MAChB,MAAQ,EAAA,EAAA;AAAA,MACR,UAAY,EAAA,QAAA;AAAA,MACZ,WAAa,EAAA,CAAA;AAAA,MACb,YAAc,EAAA,CAAA;AAAA,MACd,aAAe,EAAA,EAAA;AAAA,KACjB;AAAA,GAAA,EAAA,CAEC,MAAQ,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,MAAA,KAAU,MAAO,CAAA,MAAA,GAAS,oBAChC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAI,KAAO,EAAA,EAAE,OAAS,EAAA,MAAA,EAAQ,UAAU,UAAW,EAAA;AAAA,GAAA,kBACjD,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IACC,KAAM,EAAA,EAAA;AAAA,IACN,KAAO,EAAA,aAAA;AAAA,IACP,QAAS,EAAA,YAAA;AAAA,IACT,QAAU,EAAA,CAAA,CAAA,KAAK,iBAAkB,CAAA,CAAA,CAAE,UAAU,CAAA;AAAA,GAC/C,CACC,EAAA,CAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAe,WACd,oBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,OAAO,EAAE,SAAA,EAAW,IAAI,UAAY,EAAA,CAAA,EAAG,QAAQ,SAAU,EAAA;AAAA,IACzD,WAAA,EAAa,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAAA,IAC1C,OAAA,EAAS,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAAA,IACtC,UAAA,EAAY,MAAM,kBAAA,CAAmB,KAAK,CAAA;AAAA,IAC1C,MAAA,EAAQ,MAAM,kBAAA,CAAmB,KAAK,CAAA;AAAA,GAAA,kBAErC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,IAAY,CACf,CAAA,EACC,mCACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,KAAO,EAAA;AAAA,MACL,QAAU,EAAA,UAAA;AAAA,MACV,GAAK,EAAA,CAAA,CAAA;AAAA,MACL,KAAO,EAAA,CAAA,GAAA;AAAA,MACP,MAAQ,EAAA,CAAA;AAAA,MACR,QAAU,EAAA,EAAA;AAAA,MACV,OAAS,EAAA,OAAA;AAAA,MACT,KAAO,EAAA,GAAA;AAAA,KACT;AAAA,GAAA,EAEC,aAAc,CAAA,WACjB,CAEJ,CAAA,GACE,IACN,CAAA,GACE,IACH,EAAA,CAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,MAAU,KAAA,MAAA,CAAO,MAAW,KAAA,CAAA,mBAClC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAI,KAAO,EAAA,EAAE,OAAS,EAAA,MAAA,EAAQ,UAAU,UAAW,EAAA;AAAA,GAAA,kBACjD,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAG,KAAO,EAAA,EAAE,QAAU,EAAA,EAAA,EAAI,YAAY,GAAI,EAAA;AAAA,GACxC,EAAA,MAAA,CAAO,CAAG,CAAA,CAAA,KAAA,CAAM,KACnB,CAAA,EAAA,CAAA,CACC,YAAO,CAAP,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAW,WACV,oBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,OAAO,EAAE,SAAA,EAAW,IAAI,UAAY,EAAA,CAAA,EAAG,QAAQ,SAAU,EAAA;AAAA,IACzD,WAAA,EAAa,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAAA,IAC1C,OAAA,EAAS,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAAA,IACtC,UAAA,EAAY,MAAM,kBAAA,CAAmB,KAAK,CAAA;AAAA,IAC1C,MAAA,EAAQ,MAAM,kBAAA,CAAmB,KAAK,CAAA;AAAA,GAAA,kBAErC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,IAAY,CACf,CAAA,EACC,mCACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,KAAO,EAAA;AAAA,MACL,QAAU,EAAA,UAAA;AAAA,MACV,GAAK,EAAA,CAAA,CAAA;AAAA,MACL,KAAO,EAAA,CAAA,GAAA;AAAA,MACP,MAAQ,EAAA,CAAA;AAAA,MACR,QAAU,EAAA,EAAA;AAAA,MACV,OAAS,EAAA,OAAA;AAAA,MACT,KAAO,EAAA,GAAA;AAAA,KACT;AAAA,GAEC,EAAA,MAAA,CAAO,CAAG,CAAA,CAAA,WACb,CAEJ,CAAA,GACE,IACN,CACE,GAAA,IAAA,EAAA,CACH,aAAe,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,YAAA,oBACb,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAA,IAAE,KAAO,EAAA,EAAE,QAAU,EAAA,EAAA,EAAI,YAAY,GAAI,EAAA;AAAA,GAAA,kBACvC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IAAK,SAAU,EAAA,8CAAA;AAAA,GAAA,EACb,aAAc,CAAA,YACjB,CAAQ,EAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IAAK,SAAU,EAAA,cAAA;AAAA,GACb,EAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAe,cAClB,CACF,CACE,GAAA,IACN,CACE,GAAA,IAAA,EAEH,OACC,mBAAA,KAAA,CAAA,aAAA,CAAC,QAAS,EAAA,IAAA,CAAA,mBAET,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAA,IACC,UAAY,EAAA,UAAA;AAAA,IACZ,OAAA,EAAS,gBAAgB,aAAgB,GAAA,OAAA;AAAA,GAC3C,CAEJ,CAAA,CAAA;AAEJ,CAAA;;ACtTO,MAAM,UAAa,GAAA,CAAC,EAAE,UAAA,EAA6C,KAAA;AACxE,EAAM,MAAA,GAAA,GAAM,OAAO,oBAAoB,CAAA,CAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAO,YAAY,CAAA,CAAA;AAClC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA,CAAA;AACzD,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA,CAAA;AAGvD,EAAM,MAAA,UAAA,GAAa,SAAS,YAA0B;AACpD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,YAAa,CAAA;AAAA,MACtC,OAAA;AAAA,MACA,MAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AAEL,EAAM,MAAA,CAAC,kBAAoB,EAAA,qBAAqB,CAAI,GAAA,QAAA;AAAA,IAClD,EAAC;AAAA,GACH,CAAA;AACA,EAAA,MAAM,CAAC,MAAA,EAAQ,SAAS,CAAA,GAAI,SAAiB,CAAC,CAAA,CAAA;AAG9C,EAAA,SAAA,CAAU,MAAM;AAvClB,IAAA,IAAA,EAAA,CAAA;AAwCI,IAAI,IAAA,CAAA,EAAA,GAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,KAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmB,MAAQ,EAAA;AAC7B,MAAA,MAAM,YAAY,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,KAAA,CAC3B,MAAO,CAAA,CAAC,KAAmB,IAAe,KAAA;AACzC,QAAA,MAAM,QAAQ,IAAK,CAAA,WAAA,CAAA;AACnB,QAAA,MAAM,OAAU,GAAA,IAAA,CAAK,YAAa,CAAA,GAAA,CAAI,CAAC,UAAe,KAAA;AA5ChE,UAAAD,IAAAA,GAAAA,CAAAA;AA6CY,UAAO,OAAA;AAAA,YACL,GAAG,UAAA;AAAA,YACH,KAAA;AAAA,YACA,UAAYA,EAAAA,CAAAA,GAAAA,GAAA,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,OAAA,KAAZ,OAAAA,GAAuB,GAAA,KAAA;AAAA,WACrC,CAAA;AAAA,SACD,CAAA,CAAA;AACD,QAAA,OAAO,CAAC,GAAG,GAAK,EAAA,GAAG,OAAO,CAAA,CAAA;AAAA,SACzB,EAAC,CAAA,CACH,MAAO,CAAA,CAAC,SAAqB,IAAK,CAAA,OAAA,CAAA,CAAA;AAErC,MAAA,qBAAA,CAAsB,SAAS,CAAA,CAAA;AAAA,KAC1B,MAAA;AACL,MAAA,qBAAA,CAAsB,EAAE,CAAA,CAAA;AAAA,KAC1B;AAAA,GACC,EAAA,CAAC,UAAW,CAAA,KAAK,CAAC,CAAA,CAAA;AAGrB,EAAA,MAAM,CAAC,gBAAkB,EAAA,mBAAmB,CAAI,GAAA,QAAA,CAE9C,EAAE,CAAA,CAAA;AAEJ,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,UAAA,CAAW,UAAc,IAAA,UAAA,CAAW,QAAU,EAAA;AAChD,MAAA,MAAM,mBAA0B,EAAC,CAAA;AACjC,MAAI,IAAA,iBAAA,GAAoB,WAAW,UAAa,GAAA,GAAA,CAAA;AAChD,MAAA,IAAI,eAAkB,GAAA,CAAC,MAAO,CAAA,iBAAiB,EAC5C,GAAI,CAAA,CAAA,EAAG,MAAM,CAAA,CACb,QAAS,CAAA,CAAA,EAAG,SAAS,CAAA,CACrB,OAAO,GAAG,CAAA,CAAA;AAEb,MAAO,OAAA,eAAA,GAAkB,UAAW,CAAA,QAAA,GAAW,GAAM,EAAA;AACnD,QAAA,gBAAA,CAAiB,IAAK,CAAA;AAAA,UACpB,KAAO,EAAA,iBAAA;AAAA,UACP,GAAK,EAAA,eAAA;AAAA,SACN,CAAA,CAAA;AACD,QAAoB,iBAAA,GAAA,CAAC,OAAO,iBAAiB,CAAA,CAC1C,IAAI,CAAG,EAAA,MAAM,CACb,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AACb,QAAkB,eAAA,GAAA,CAAC,OAAO,eAAe,CAAA,CAAE,IAAI,CAAG,EAAA,MAAM,CAAE,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAAA,OACtE;AAEA,MAAA,gBAAA,CAAiB,IAAK,CAAA;AAAA,QACpB,KAAO,EAAA,iBAAA;AAAA,QACP,GAAK,EAAA,eAAA;AAAA,OACN,CAAA,CAAA;AAED,MAAA,mBAAA,CAAoB,gBAAgB,CAAA,CAAA;AAAA,KACtC;AAAA,GACF,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAGf,EAAM,MAAA,mBAAA,GAAsB,SAAS,YAA0B;AAC7D,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,qBAAsB,CAAA;AAAA,MAC/C,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,MAAM,CAAC,0BAA4B,EAAA,6BAA6B,CAC9D,GAAA,QAAA,CAAc,EAAE,CAAA,CAAA;AAClB,EAAA,MAAM,CAAC,2BAA6B,EAAA,8BAA8B,CAChE,GAAA,QAAA,CAAc,EAAE,CAAA,CAAA;AAClB,EAAM,MAAA;AAAA,IACJ,kCAAA;AAAA,IACA,qCAAA;AAAA,GACF,GAAI,QAAc,CAAA,EAAE,CAAA,CAAA;AACpB,EAAM,MAAA;AAAA,IACJ,iCAAA;AAAA,IACA,oCAAA;AAAA,GACF,GAAI,QAAc,CAAA,EAAE,CAAA,CAAA;AACpB,EAAA,MAAM,CAAC,qBAAA,EAAuB,wBAAwB,CAAA,GAAI,SAExD,IAAI,CAAA,CAAA;AAEN,EAAA,MAAM,oBAAuB,GAAA;AAAA,IAC3B;AAAA,MACE,KAAO,EAAA;AAAA,QACL,KAAO,EAAA,sBAAA;AAAA,QACP,KAAO,EAAA,sBAAA;AAAA,OACT;AAAA,MACA,cAAgB,EAAA,OAAA;AAAA,MAChB,YAAc,EAAA,qBAAA;AAAA,MACd,MAAQ,EAAA;AAAA,QACN;AAAA,UACE,IAAM,EAAA,wBAAA;AAAA,UACN,IAAA,EAAM,kCACF,GAAA,kCAAA,GACA,EAAC;AAAA,SACP;AAAA,QACA;AAAA,UACE,IAAM,EAAA,oBAAA;AAAA,UACN,IAAA,EAAM,iCACF,GAAA,iCAAA,GACA,EAAC;AAAA,SACP;AAAA,OACF;AAAA,KACF;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,oBAAuB,GAAA,WAAA;AAAA,IAC3B,CAAC,IAAS,KAAA;AACR,MAAA,MAAM,YAAe,GAAA,IAAA,CAAK,MAAO,CAAA,CAAC,UAA2B,KAAA;AAC3D,QAAA,OAAO,kBAAmB,CAAA,IAAA;AAAA,UACxB,CAAC,IAAM,KAAA;AAvJjB,YAAA,IAAA,EAAA,CAAA;AAwJY,YAAK,OAAA,IAAA,CAAA,UAAA,IACL,KAAK,GAAI,CAAA,QAAA;AAAA,cAAA,CACP,EAAY,GAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA,KAAZ,IAAwB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,iBAAmB,EAAA,EAAA,CAAA;AAAA,aACrD,CAAA;AAAA,WAAA;AAAA,SACJ,CAAA;AAAA,OACD,CAAA,CAAA;AACD,MAAO,OAAA,YAAA,CAAA;AAAA,KACT;AAAA,IACA,CAAC,kBAAkB,CAAA;AAAA,GACrB,CAAA;AAEA,EAAA,SAAA,CAAU,MAAM;AAnKlB,IAAA,IAAA,EAAA,CAAA;AAoKI,IAAI,IAAA,CAAA,EAAA,GAAA,mBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAqB,KAArB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA4B,MAAQ,EAAA;AACtC,MAAM,MAAA,YAAA,GAAe,oBAAqB,CAAA,mBAAA,CAAoB,KAAK,CAAA,CAAA;AACnE,MAAA,6BAAA,CAA8B,YAAY,CAAA,CAAA;AAAA,KACrC,MAAA;AACL,MAAA,6BAAA,CAA8B,EAAE,CAAA,CAAA;AAAA,KAClC;AAAA,GACC,EAAA,CAAC,mBAAqB,EAAA,oBAAoB,CAAC,CAAA,CAAA;AAE9C,EAAA,MAAM,oBAAuB,GAAA,WAAA;AAAA,IAC3B,CAAC,SAAS,SAAc,KAAA;AACtB,MAAA,OAAO,gBAAiB,CAAA,MAAA,CAAO,CAAC,GAAA,EAAiB,KAAK,CAAM,KAAA;AAC1D,QAAA,IAAI,cAAc,0BAA2B,CAAA,MAAA;AAAA,UAC3C,CAAC,UACC,KAAA,UAAA,CAAW,SAAY,GAAA,GAAA,IAAQ,IAAI,KACnC,IAAA,UAAA,CAAW,SAAY,GAAA,GAAA,IAAQ,GAAI,CAAA,GAAA;AAAA,SACvC,CAAA;AAEA,QAAA,IAAI,MAAQ,EAAA;AACV,UAAA,WAAA,GAAc,WAAY,CAAA,MAAA;AAAA,YACxB,CAAC,UAA2B,KAAA,UAAA,CAAW,MAAW,KAAA,MAAA;AAAA,WACpD,CAAA;AAAA,SACF;AAEA,QAAI,IAAA,CAAA,KAAA,CAAM,gBAAkB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,MAAA,IAAS,CAAG,EAAA;AACtC,UAAO,OAAA;AAAA,YACL,GAAG,GAAA;AAAA,YACH,CAAC,GAAA,CAAI,KAAO,EAAA,WAAA,CAAY,MAAM,CAAA;AAAA,YAC9B,CAAC,GAAA,CAAI,GAAK,EAAA,WAAA,CAAY,MAAM,CAAA;AAAA,WAC9B,CAAA;AAAA,SACF;AACA,QAAO,OAAA,CAAC,GAAG,GAAK,EAAA,CAAC,IAAI,KAAO,EAAA,WAAA,CAAY,MAAM,CAAC,CAAA,CAAA;AAAA,OACjD,EAAG,EAAE,CAAA,CAAA;AAAA,KACP;AAAA,IACA,CAAC,4BAA4B,gBAAgB,CAAA;AAAA,GAC/C,CAAA;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,yEAA4B,MAAQ,EAAA;AACtC,MAAsC,qCAAA,CAAA,oBAAA,CAAqB,SAAS,CAAC,CAAA,CAAA;AACrE,MAAqC,oCAAA,CAAA,oBAAA,CAAqB,QAAQ,CAAC,CAAA,CAAA;AACnE,MAAA,8BAAA,CAA+B,sBAAsB,CAAA,CAAA;AAAA,KAChD,MAAA;AACL,MAAA,qCAAA,CAAsC,EAAE,CAAA,CAAA;AACxC,MAAA,oCAAA,CAAqC,EAAE,CAAA,CAAA;AACvC,MAAA,8BAAA,CAA+B,EAAE,CAAA,CAAA;AAAA,KACnC;AAAA,GACC,EAAA,CAAC,0BAA4B,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,0BAAA,CAAA,MAAA,EAAQ,oBAAoB,CAAC,CAAA,CAAA;AAE7D,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,2EAA6B,MAAQ,EAAA;AACvC,MAAA,MAAM,mBAAmB,2BAA4B,CAAA,MAAA;AAAA,QACnD,CAAC,GAAa,EAAA,IAAA,EAAgB,CAC5B,KAAA,2BAAA,CAA4B,SAAS,CAAM,KAAA,CAAA,GAAI,GAAM,GAAA,IAAA,CAAK,CAAK,CAAA,GAAA,GAAA;AAAA,QACjE,CAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAM,cACJ,GAAA,CAAA,gBAAA,GAAmB,gBAAiB,CAAA,MAAA,EACpC,QAAQ,CAAC,CAAA,CAAA;AACX,MAAA,wBAAA,CAAyB,cAAc,CAAA,CAAA;AAAA,KAClC,MAAA;AACL,MAAA,wBAAA,CAAyB,IAAI,CAAA,CAAA;AAAA,KAC/B;AAAA,GACC,EAAA,CAAC,2BAA6B,EAAA,gBAAA,EAAkB,kBAAkB,CAAC,CAAA,CAAA;AAEtE,EAAA,SAAS,iBAAiB,IAAkB,EAAA;AAC1C,IAAA,MAAM,eAA6B,kBAAmB,CAAA,GAAA;AAAA,MACpD,CAAC,UAA2B,KAAA;AAC1B,QAAI,IAAA,UAAA,CAAW,GAAQ,KAAA,IAAA,CAAK,GAAK,EAAA;AAC/B,UAAA,OAAO,EAAE,GAAG,UAAA,EAAY,UAAY,EAAA,CAAC,WAAW,UAAW,EAAA,CAAA;AAAA,SAC7D;AACA,QAAO,OAAA,UAAA,CAAA;AAAA,OACT;AAAA,KACF,CAAA;AACA,IAAA,qBAAA,CAAsB,YAAY,CAAA,CAAA;AAAA,GACpC;AAIA,EAAM,MAAA,aAAA,GAAgB,SAAS,YAA0B;AACvD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,eAAgB,CAAA;AAAA,MACzC,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,MAAM,CAAC,oBAAsB,EAAA,uBAAuB,CAAI,GAAA,QAAA,CAAgB,EAAE,CAAA,CAAA;AAC1E,EAAA,MAAM,CAAC,qBAAuB,EAAA,wBAAwB,CAAI,GAAA,QAAA,CAExD,EAAE,CAAA,CAAA;AACJ,EAAA,MAAM,CAAC,UAAY,EAAA,aAAa,CAAI,GAAA,QAAA,CAAmB,EAAE,CAAA,CAAA;AACzD,EAAA,MAAM,CAAC,8BAAgC,EAAA,iCAAiC,CACtE,GAAA,QAAA,CAAqB,EAAE,CAAA,CAAA;AACzB,EAAA,MAAM,CAAC,sBAAwB,EAAA,yBAAyB,CAAI,GAAA,QAAA,CAE1D,EAAE,CAAA,CAAA;AACJ,EAAA,MAAM,CAAC,yBAA2B,EAAA,4BAA4B,CAAI,GAAA,QAAA,CAEhE,EAAE,CAAA,CAAA;AACJ,EAAA,MAAM,CAAC,wBAA0B,EAAA,2BAA2B,CAAI,GAAA,QAAA,CAE9D,EAAE,CAAA,CAAA;AACJ,EAAM,MAAA;AAAA,IACJ,iCAAA;AAAA,IACA,oCAAA;AAAA,GACF,GAAI,QAAgB,CAAA,EAAE,CAAA,CAAA;AACtB,EAAA,MAAM,CAAC,gBAAA,EAAkB,mBAAmB,CAAA,GAAI,SAItC,IAAI,CAAA,CAAA;AACd,EAAA,MAAM,cAAiB,GAAA;AAAA,IACrB;AAAA,MACE,KAAO,EAAA;AAAA,QACL,KAAO,EAAA,YAAA;AAAA,QACP,KAAO,EAAA,YAAA;AAAA,OACT;AAAA,MACA,WACE,EAAA,wIAAA;AAAA,MACF,cAAgB,EAAA,EAAA;AAAA,MAChB,cAAc,gBAAkB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,SAAA;AAAA,MAChC,MAAQ,EAAA;AAAA,QACN;AAAA,UACE,IAAM,EAAA,wBAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,CAAA,sBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAwB,MAAS,IAAA,sBAAA,GAAyB,EAAC;AAAA,SACnE;AAAA,QAEA;AAAA,UACE,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,IAAM,EAAA,CAAA,yBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,yBAAA,CAA2B,MAC7B,IAAA,yBAAA,GACA,EAAC;AAAA,SACP;AAAA,OACF;AAAA,KACF;AAAA,IACA;AAAA,MACE,KAAO,EAAA;AAAA,QACL,KAAO,EAAA,WAAA;AAAA,QACP,KAAO,EAAA,WAAA;AAAA,OACT;AAAA,MACA,WACE,EAAA,0HAAA;AAAA,MACF,cAAgB,EAAA,EAAA;AAAA,MAChB,cAAc,gBAAkB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,QAAA;AAAA,MAChC,MAAQ,EAAA;AAAA,QACN;AAAA,UACE,IAAM,EAAA,uBAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,qBAAA,CAAsB,MAAS,GAAA,qBAAA,GAAwB,EAAC;AAAA,SAChE;AAAA,QAEA;AAAA,UACE,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,IAAM,EAAA,wBAAA,CAAyB,MAAS,GAAA,wBAAA,GAA2B,EAAC;AAAA,SACtE;AAAA,OACF;AAAA,KACF;AAAA,IACA;AAAA,MACE,KAAO,EAAA;AAAA,QACL,KAAO,EAAA,sBAAA;AAAA,QACP,KAAO,EAAA,uBAAA;AAAA,OACT;AAAA,MACA,WACE,EAAA,uEAAA;AAAA,MACF,cAAgB,EAAA,EAAA;AAAA,MAChB,cAAc,gBAAkB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,iBAAA;AAAA,MAChC,MAAQ,EAAA;AAAA,QACN;AAAA,UACE,IAAM,EAAA,mCAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,8BAAA,CAA+B,MACjC,GAAA,8BAAA,GACA,EAAC;AAAA,SACP;AAAA,QAEA;AAAA,UACE,IAAM,EAAA,SAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,IAAM,EAAA,iCAAA,CAAkC,MACpC,GAAA,iCAAA,GACA,EAAC;AAAA,SACP;AAAA,OACF;AAAA,KACF;AAAA,GACF,CAAA;AAGA,EAAA,SAAA,CAAU,MAAM;AApWlB,IAAA,IAAA,EAAA,CAAA;AAqWI,IAAI,IAAA,CAAA,EAAA,GAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAe,KAAf,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAsB,MAAQ,EAAA;AAChC,MAAM,MAAA,YAAA,GAAe,oBAAqB,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AAC7D,MAAA,uBAAA,CAAwB,YAAY,CAAA,CAAA;AAAA,KAC/B,MAAA;AACL,MAAA,uBAAA,CAAwB,EAAE,CAAA,CAAA;AAAA,KAC5B;AAAA,KACC,CAAC,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAe,KAAO,EAAA,kBAAA,EAAoB,oBAAoB,CAAC,CAAA,CAAA;AAGnE,EAAA,MAAM,kBAAqB,GAAA,WAAA;AAAA,IACzB,CAAC,WAAwB,KAAA;AACvB,MAAO,OAAA,oBAAA,CAAqB,GAAI,CAAA,CAAC,UAAe,KAAA;AAAA,QAC9C,WAAW,SAAY,GAAA,GAAA;AAAA,QACvB,WAAW,WAAe,CAAA,GAAA,GAAA;AAAA,OAC3B,CAAA,CAAA;AAAA,KACH;AAAA,IACA,CAAC,oBAAoB,CAAA;AAAA,GACvB,CAAA;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,6DAAsB,MAAQ,EAAA;AAChC,MAAyB,wBAAA,CAAA,kBAAA,CAAmB,WAAW,CAAC,CAAA,CAAA;AACxD,MAA0B,yBAAA,CAAA,kBAAA,CAAmB,YAAY,CAAC,CAAA,CAAA;AAC1D,MAAA,iCAAA;AAAA,QACE,mBAAmB,uBAAuB,CAAA;AAAA,OAC5C,CAAA;AACA,MAAA,aAAA,CAAc,qBAAqB,GAAI,CAAA,CAAC,IAAS,KAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAAA,KACrD,MAAA;AACL,MAAA,wBAAA,CAAyB,EAAE,CAAA,CAAA;AAC3B,MAAA,yBAAA,CAA0B,EAAE,CAAA,CAAA;AAC5B,MAAA,iCAAA,CAAkC,EAAE,CAAA,CAAA;AACpC,MAAA,aAAA,CAAc,EAAE,CAAA,CAAA;AAAA,KAClB;AAAA,GACC,EAAA,CAAC,oBAAsB,EAAA,kBAAA,EAAoB,MAAM,CAAC,CAAA,CAAA;AAGrD,EAAA,MAAM,oBAAuB,GAAA,WAAA;AAAA,IAC3B,CAAC,aAAkB,KAAA;AACjB,MAAA,OAAO,gBAAiB,CAAA,MAAA,CAAO,CAAC,GAAA,EAAiB,KAAK,CAAM,KAAA;AAC1D,QAAA,MAAM,iBAAiB,aAAc,CAAA,MAAA;AAAA,UACnC,CAAC,eACC,UAAW,CAAA,CAAA,CAAA,IAAM,IAAI,KAAS,IAAA,UAAA,CAAW,MAAM,GAAI,CAAA,GAAA;AAAA,SACvD,CAAA;AAEA,QAAM,MAAA,UAAA,GAAA,CAAa,cAAgB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,MAAA,IAC/B,cAAe,CAAA,MAAA;AAAA,UACb,CAAC,KAAA,EAAe,KAAoB,KAAA,KAAA,GAAQ,KAAM,CAAA,CAAA,CAAA;AAAA,UAClD,CAAA;AAAA,SACF,IAAI,iDAAgB,MACpB,CAAA,GAAA,IAAA,CAAA;AAEJ,QAAA,IAAI,CAAC,UAAY,EAAA;AACf,UAAA,IAAI,CAAM,KAAA,CAAA,gBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAkB,MAAS,IAAA,CAAA,KAAK,2BAAK,MAAQ,CAAA,EAAA;AACrD,YAAO,OAAA,CAAC,GAAG,GAAA,EAAK,CAAC,GAAA,CAAI,GAAK,EAAA,GAAA,CAAI,GAAI,CAAA,MAAA,GAAS,CAAG,CAAA,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,WACnD;AACA,UAAO,OAAA,GAAA,CAAA;AAAA,SACT;AACA,QAAI,IAAA,EAAC,2BAAK,MAAQ,CAAA,EAAA;AAChB,UAAO,OAAA;AAAA,YACL,GAAG,GAAA;AAAA,YACH,CAAC,gBAAA,CAAiB,CAAG,CAAA,CAAA,KAAA,EAAO,UAAU,CAAA;AAAA,YACtC,CAAC,GAAI,CAAA,GAAA,EAAK,UAAU,CAAA;AAAA,WACtB,CAAA;AAAA,SACF;AACA,QAAA,OAAO,CAAC,GAAG,GAAA,EAAK,CAAC,GAAI,CAAA,GAAA,EAAK,UAAU,CAAC,CAAA,CAAA;AAAA,OACvC,EAAG,EAAE,CAAA,CAAA;AAAA,KACP;AAAA,IACA,CAAC,gBAAgB,CAAA;AAAA,GACnB,CAAA;AAEA,EAAM,MAAA,mBAAA,GAAsB,WAAY,CAAA,CAAC,KAAkB,KAAA;AACzD,IAAM,MAAA,aAAA,GAA+B,MAAO,CAAA,QAAA,CAAS,KAAK,CAAA,CAAA;AAC1D,IAAA,IAAI,cAAiB,GAAA,GAAA,CAAA;AAErB,IAAA,IAAI,UAAU,CAAG,EAAA;AACf,MAAI,IAAA,aAAA,CAAc,MAAM,MAAQ,EAAA;AAC9B,QAAA,cAAA,GAAiB,CAAG,EAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OACvD,MAAA,IAAW,aAAc,CAAA,KAAA,CAAM,IAAM,EAAA;AACnC,QAAA,cAAA,GAAiB,CAAG,EAAA,aAAA,CAAc,KAAM,CAAA,IAAA,CAAA,EAAA,EACtC,aAAc,CAAA,KAAA,CAAM,OAAW,IAAA,EAAA,GAC3B,aAAc,CAAA,KAAA,CAAM,KAAQ,GAAA,CAAA,GAC5B,cAAc,KAAM,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAE5B,MAAA,IAAW,aAAc,CAAA,KAAA,CAAM,KAAO,EAAA;AACpC,QAAA,cAAA,GAAiB,CAAG,EAAA,aAAA,CAAc,KAAM,CAAA,KAAA,CAAA,EAAA,EACtC,aAAc,CAAA,KAAA,CAAM,OAAW,IAAA,EAAA,GAC3B,aAAc,CAAA,KAAA,CAAM,OAAU,GAAA,CAAA,GAC9B,cAAc,KAAM,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAE5B,MAAA,IAAW,aAAc,CAAA,KAAA,CAAM,OAAS,EAAA;AACtC,QAAA,cAAA,GAAiB,CAAG,EAAA,aAAA,CAAc,KAAM,CAAA,OAAA,CAAA,EAAA,EACtC,aAAc,CAAA,KAAA,CAAM,YAAgB,IAAA,EAAA,GAChC,aAAc,CAAA,KAAA,CAAM,OAAU,GAAA,CAAA,GAC9B,cAAc,KAAM,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAE5B,MAAA,IAAW,aAAc,CAAA,KAAA,CAAM,OAAS,EAAA;AACtC,QAAiB,cAAA,GAAA,CAAA,EACf,aAAc,CAAA,KAAA,CAAM,YAAgB,IAAA,EAAA,GAChC,cAAc,KAAM,CAAA,OAAA,GAAU,CAC9B,GAAA,aAAA,CAAc,KAAM,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAE5B;AAAA,KACF;AAEA,IAAO,OAAA,cAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AAEL,EAAA,SAAA,CAAU,MAAM;AAEd,IAAA,IAAI,YAA8B,GAAA,IAAA,CAAA;AAClC,IAAA,IAAI,WAA6B,GAAA,IAAA,CAAA;AACjC,IAAA,IAAI,oBAAsC,GAAA,IAAA,CAAA;AAE1C,IAAA,MAAM,cAAiB,GAAA,CAAA,sBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAwB,MAC3C,IAAA,sBAAA,CAAuB,MAAO,CAAA,CAAC,GAAK,EAAA,IAAA,KAAS,GAAM,GAAA,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,CAC7D,GAAA,IAAA,CAAA;AACJ,IAAA,MAAM,aAAgB,GAAA,CAAA,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAuB,MACzC,IAAA,qBAAA,CAAsB,MAAO,CAAA,CAAC,GAAK,EAAA,IAAA,KAAS,GAAM,GAAA,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,CAC5D,GAAA,IAAA,CAAA;AAEJ,IAAA,MAAM,sBAAyB,GAAA,CAAA,8BAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,8BAAA,CAAgC,MAC3D,IAAA,8BAAA,CAA+B,MAAO,CAAA,CAAC,GAAK,EAAA,IAAA,KAAS,GAAM,GAAA,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,CACrE,GAAA,IAAA,CAAA;AAEJ,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAe,YAAA,GAAA,mBAAA;AAAA,QACb,iBAAiB,sBAAuB,CAAA,MAAA;AAAA,OAC1C,CAAA;AAAA,KACF;AACA,IAAA,IAAI,aAAe,EAAA;AACjB,MAAc,WAAA,GAAA,mBAAA;AAAA,QACZ,gBAAgB,qBAAsB,CAAA,MAAA;AAAA,OACxC,CAAA;AAAA,KACF;AACA,IAAA,IAAI,sBAAwB,EAAA;AAC1B,MAAuB,oBAAA,GAAA,mBAAA;AAAA,QACrB,yBAAyB,8BAA+B,CAAA,MAAA;AAAA,OAC1D,CAAA;AAAA,KACF;AAEA,IAAoB,mBAAA,CAAA;AAAA,MAClB,SAAW,EAAA,YAAA;AAAA,MACX,QAAU,EAAA,WAAA;AAAA,MACV,iBAAmB,EAAA,oBAAA;AAAA,KACpB,CAAA,CAAA;AAGD,IAA6B,4BAAA,CAAA,oBAAA,CAAqB,sBAAsB,CAAC,CAAA,CAAA;AACzE,IAA4B,2BAAA,CAAA,oBAAA,CAAqB,qBAAqB,CAAC,CAAA,CAAA;AACvE,IAAA,oCAAA;AAAA,MACE,qBAAqB,8BAA8B,CAAA;AAAA,KACrD,CAAA;AAAA,GACC,EAAA;AAAA,IACD,qBAAA;AAAA,IACA,sBAAA;AAAA,IACA,8BAAA;AAAA,IACA,oBAAA;AAAA,IACA,mBAAA;AAAA,GACD,CAAA,CAAA;AAMD,EAAA,IAAI,yCAAY,OAAS,EAAA;AACvB,IAAA,2CAAQ,QAAS,EAAA,IAAA,CAAA,CAAA;AAAA,GACnB,MAAA,IAAW,yCAAY,KAAO,EAAA;AAC5B,IAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAM,QAAS,EAAA,OAAA;AAAA,KAAS,EAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,MAAM,OAAQ,CAAA,CAAA;AAAA,GAC5D;AAEA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAS,KAAM,EAAA,cAAA;AAAA,GAAA,kBACb,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,IAAG,UAAW,EAAA,SAAA;AAAA,GAAA,kBACpC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,CAAA;AAAA,IAAG,EAAI,EAAA,CAAA;AAAA,GAAA,kBACnB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAS,KAAM,EAAA,cAAA;AAAA,GACb,EAAA,kBAAA,CACE,MAAO,CAAA,CAAC,IAAqB,KAAA,IAAA,CAAK,UAAU,CAC5C,CAAA,GAAA,CAAI,CAAC,IAAA,qBACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IACC,OAAO,IAAK,CAAA,IAAA;AAAA,IACZ,KAAK,IAAK,CAAA,GAAA;AAAA,IACV,IAAK,EAAA,OAAA;AAAA,IACL,QAAA,EAAU,MAAM,gBAAA,CAAiB,IAAI,CAAA;AAAA,GACvC,CACD,CAAA,EACF,kBACE,CAAA,MAAA,CAAO,CAAC,IAAA,KAAqB,CAAC,IAAA,CAAK,UAAU,CAAA,CAC7C,GAAI,CAAA,CAAC,yBACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IACC,OAAO,IAAK,CAAA,IAAA;AAAA,IACZ,KAAK,IAAK,CAAA,GAAA;AAAA,IACV,IAAK,EAAA,OAAA;AAAA,IACL,OAAQ,EAAA,UAAA;AAAA,IACR,OAAA,EAAS,MAAM,gBAAA,CAAiB,IAAI,CAAA;AAAA,GACtC,CACD,CACL,CACF,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,CAAA;AAAA,IAAG,EAAI,EAAA,EAAA;AAAA,GAAA,kBACnB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,IAAI,EAAI,EAAA,CAAA;AAAA,GAAA,kBACpB,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,MAAQ,EAAA,oBAAA;AAAA,IACR,UAAA,EAAY,CAAC,SAAA,EAAW,SAAS,CAAA;AAAA,IACjC,WAAa,EAAA,GAAA;AAAA,IACb,SAAS,mBAAoB,CAAA,OAAA;AAAA,IAC7B,oBAAsB,EAAA,IAAA;AAAA,IACtB,aAAe,EAAA,IAAA;AAAA,IACf,cAAgB,EAAA,IAAA;AAAA,GAClB,CACF,mBACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,IAAI,EAAI,EAAA,CAAA;AAAA,GAAA,kBACpB,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,MAAQ,EAAA,cAAA;AAAA,IACR,UAAA,EAAY,CAAC,SAAA,EAAW,SAAS,CAAA;AAAA,IACjC,gBAAgB,WAAqB;AACnC,MAAA,MAAM,cAAyB,GAAA,mBAAA;AAAA,QAC7B,IAAK,CAAA,KAAA;AAAA,OACP,CAAA;AACA,MAAA,OAAO,CAAS,MAAA,EAAA,cAAA,CAAA,OAAA,CAAA,CAAA;AAAA,KAClB;AAAA,IACA,WAAa,EAAA,GAAA;AAAA,IACb,sBAAsB,WAAqB;AACzC,MAAA,MAAM,cAAiB,GAAA,mBAAA,CAAoB,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;AAEzD,MAAA,MAAM,WAAW,sBAAuB,CAAA,SAAA;AAAA,QACtC,CAAC,IAAA,KAAS,IAAK,CAAA,CAAA,CAAA,KAAO,KAAK,OAAQ,CAAA,CAAA;AAAA,OACrC,CAAA;AAEA,MAAA,OAAO,CAAS,MAAA,EAAA,IAAA,CAAK,MAAO,CAAA,WAAA,CAAY,IAAK,CAAA,OAAA;AAAA,QAC3C,cAAA;AAAA,QACA,EAAA;AAAA,OACF,CAAA,EAAA,EAAM,mCACJ,IAAK,CAAA,MAAA,CAAO,gBAAgB,SACxB,GAAA,CAAA,YAAA,EAAe,WAAW,QAC1B,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AAAA,KAER;AAAA,IACA,SAAS,aAAc,CAAA,OAAA;AAAA,IACvB,aAAe,EAAA,IAAA;AAAA,IACf,SAAA;AAAA,IACA,MAAA;AAAA,GACF,CACF,CACF,CACF,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;AC5kBO,MAAM,wBAAwB,CAAC;AAAA,EACpC,UAAA;AAAA,EACA,OAAA;AACF,CAGM,KAAA;AACJ,EAAA,MAAM,CAAC,IAAA,EAAM,OAAO,CAAA,GAAI,SAAS,CAAC,CAAA,CAAA;AAClC,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAI,SAAS,EAAE,CAAA,CAAA;AAEjD,EAAM,MAAA,gBAAA,GAAmB,CAAC,KAAA,EAAgB,OAAoB,KAAA;AAC5D,IAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,GACjB,CAAA;AAEA,EAAM,MAAA,uBAAA,GAA0B,CAC9B,KACG,KAAA;AACH,IAAe,cAAA,CAAA,CAAC,KAAM,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAClC,IAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;AAAA,GACX,CAAA;AAEA,EAAM,MAAA,2BAAA,GAA8B,qBAAsB,CAAA,OAAO,CAAE,CAAA,IAAA;AAAA,IACjE,CAAC,CAAA,EAAG,CAAM,KAAA,CAAA,CAAE,YAAY,CAAE,CAAA,SAAA;AAAA,GAC5B,CAAA;AAEA,EAAA,MAAM,yBAAmC,2BAA4B,CAAA,GAAA;AAAA,IACnE,CAAc,UAAA,KAAA;AAEZ,MAAA,IAAI,6BAAgC,GAAA,EAAE,GAAG,UAAA,EAAY,UAAU,IAAK,EAAA,CAAA;AAGpE,MAAA,MAAM,qBAAqB,OACxB,CAAA,MAAA,CAAO,CAAQ,IAAA,KAAA,IAAA,CAAK,QAAQ,UAAW,CAAA,MAAA,CAAO,GAAG,CAAA,CACjD,KAAK,CAAC,CAAA,EAAG,MAAM,CAAE,CAAA,SAAA,GAAY,EAAE,SAAS,CAAA,CAAA;AAE3C,MAAA,IAAI,mBAAmB,MAAQ,EAAA;AAE7B,QAAA,MAAM,aAAa,kBAAmB,CAAA,CAAA,CAAA,CAAA;AAGtC,QAAgC,6BAAA,GAAA;AAAA,UAC9B,GAAG,UAAA;AAAA,UACH,WAAW,UAAW,CAAA,SAAA;AAAA,UACtB,QAAU,EAAA,IAAA;AAAA,SACZ,CAAA;AAAA,OACF;AAEA,MAAA,MAAM,cAAc,OAAQ,CAAA,MAAA;AAAA,QAC1B,CAAQ,IAAA,KAAA,IAAA,CAAK,MAAO,CAAA,GAAA,KAAQ,WAAW,MAAO,CAAA,GAAA;AAAA,OAChD,CAAA;AAEA,MAAA,OAAO,EAAE,GAAG,6BAAA,EAA+B,UAAU,CAAC,GAAG,WAAW,CAAE,EAAA,CAAA;AAAA,KACxE;AAAA,GACF,CAAA;AAEA,EAAM,MAAA,kBAAA,GAAqB,sBAAuB,CAAA,GAAA,CAAI,CAAU,MAAA,KAAA;AA3ElE,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA4EI,IAAA,MAAM,eAAkB,GAAA;AAAA,MACtB,cAAc,MAAO,CAAA,SAAA;AAAA,MACrB,mBAAmB,MAAO,CAAA,eAAA;AAAA,MAC1B,iBAAiB,MAAO,CAAA,aAAA;AAAA,MACxB,MAAA,EAAA,CAAQ,EAAO,GAAA,MAAA,CAAA,MAAA,KAAP,IAAiB,GAAA,EAAA,GAAA,EAAA;AAAA,MACzB,cAAc,MAAO,CAAA,GAAA;AAAA,MACrB,MAAM,MAAO,CAAA,IAAA;AAAA,MACb,SAAS,MAAO,CAAA,OAAA;AAAA,MAChB,OAAO,MAAO,CAAA,KAAA;AAAA,MACd,KAAA,EAAA,CACE,YAAO,MAAO,CAAA,KAAA,CACX,MAAM,GAAG,CAAA,CACT,IAAI,CAAQ,IAAA,KAAA,IAAA,CAAK,GAAG,WAAY,EAAA,GAAI,KAAK,KAAM,CAAA,CAAC,CAAC,CACjD,CAAA,IAAA,CAAK,GAAG,CAAA,KAHX,IAGgB,GAAA,EAAA,GAAA,EAAA;AAAA,MAClB,UAAY,EAAA,CAAC,MAAO,CAAA,MAAA,CAAO,YAAY,CAAG,CAAA,CAAA,KAAA;AAAA,MAC1C,QAAA,EAAA,CAAA,CAAU,sCAAQ,QAAR,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAkB,UACxB,MAAO,CAAA,QAAA,CAAS,IAAI,CAAW,OAAA,KAAA;AA5FzC,QAAAA,IAAAA,GAAAA,CAAAA;AA6FY,QAAO,OAAA;AAAA,UACL,cAAc,OAAQ,CAAA,SAAA;AAAA,UACtB,mBAAmB,OAAQ,CAAA,eAAA;AAAA,UAC3B,iBAAiB,OAAQ,CAAA,aAAA;AAAA,UACzB,MAAQA,EAAAA,CAAAA,GAAAA,GAAA,OAAQ,CAAA,MAAA,KAAR,OAAAA,GAAkB,GAAA,EAAA;AAAA,UAC1B,cAAc,OAAQ,CAAA,GAAA;AAAA,UACtB,MAAM,OAAQ,CAAA,IAAA;AAAA,UACd,SAAS,OAAQ,CAAA,OAAA;AAAA,UACjB,OAAO,OAAQ,CAAA,KAAA;AAAA,UACf,KAAO,EAAA,EAAA;AAAA,UACP,UAAY,EAAA,CAAC,MAAO,CAAA,MAAA,CAAO,YAAY,CAAG,CAAA,CAAA,KAAA;AAAA,SAC5C,CAAA;AAAA,OACD,CACD,GAAA,IAAA;AAAA,KACN,CAAA;AACA,IAAO,OAAA,eAAA,CAAA;AAAA,GACR,CAAA,CAAA;AAED,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,GACb,kBAAA,KAAA,CAAA,aAAA,CAAC,sCACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAM,YAAW,EAAA,mBAAA;AAAA,GAAA,kBACf,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,IAAA,kBACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,kBACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAS,mBAC3B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,GAAO,EAAA,YAAU,mBACnC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAS,EAAA,MAAI,mBAC/B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,GAAO,EAAA,IAAE,mBAC3B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAS,EAAA,QAAM,mBACjC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,GAAO,EAAA,YAAU,mBACnC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAS,EAAA,MAAI,mBAC/B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,IAAO,IAAK,EAAA,QAAA;AAAA,GAAS,EAAA,aAExC,mBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAS,EAAA,OAAK,mBAChC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,MAAA;AAAA,GAAO,EAAA,OAAK,mBAC9B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAQ,EAAA,QAAA;AAAA,GAAA,EAAS,YAAU,CACxC,CACF,mBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,IAAA,EACE,mBACE,KAAM,CAAA,IAAA,GAAO,WAAa,EAAA,IAAA,GAAO,cAAc,WAAW,CAAA,CAC1D,IAAI,CAAC,GAAA,EAAK,sBACR,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAA,IAAI,KAAK,GAAI,CAAA,YAAA,CAAA;AAAA,IAAe,GAAA;AAAA,GAAU,CACxC,CACL,CACF,CACF,mBACC,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAA,IACC,kBAAoB,EAAA,CAAC,EAAI,EAAA,EAAA,EAAI,GAAG,CAAA;AAAA,IAChC,SAAU,EAAA,KAAA;AAAA,IACV,OAAO,kBAAmB,CAAA,MAAA;AAAA,IAC1B,WAAA;AAAA,IACA,IAAA;AAAA,IACA,YAAc,EAAA,gBAAA;AAAA,IACd,mBAAqB,EAAA,uBAAA;AAAA,GACvB,CACF,CAAA,CAAA;AAEJ,CAAA,CAAA;AAEA,SAAS,IAAI,KAAoC,EAAA;AA1JjD,EAAA,IAAA,EAAA,CAAA;AA2JE,EAAM,MAAA,EAAE,KAAQ,GAAA,KAAA,CAAA;AAChB,EAAA,MAAM,CAAC,IAAM,EAAA,OAAO,CAAI,GAAA,KAAA,CAAM,SAAS,KAAK,CAAA,CAAA;AAE5C,EAAA,2CACG,KAAM,CAAA,QAAA,EAAN,IACC,kBAAA,KAAA,CAAA,aAAA,CAAC,gCACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAAA,kBAC9D,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAA,IAGC,OAAS,EAAA,MAAM,OAAQ,CAAA,CAAC,IAAI,CAAA;AAAA,GAE3B,EAAA,IAAA,uCAAQ,eAAgB,EAAA,IAAA,CAAA,uCAAM,iBAAkB,EAAA,IAAA,CACnD,CACF,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAQ,EAAA,MAAA;AAAA,IACR,SAAU,EAAA,IAAA;AAAA,IACV,KAAM,EAAA,KAAA;AAAA,IACN,OAAO,EAAE,KAAA,EAAO,OAAO,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAEtD,EAAA,GAAA,CAAI,YACP,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAC9D,EAAA,GAAA,CAAI,iBACP,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,GAAA,CAAI,eACP,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAC9D,EAAA,GAAA,CAAI,MACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,GAAA,CAAI,YACP,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAC9D,EAAA,GAAA,CAAI,IACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,OAAO,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACvD,OAAQ,EAAA,MAAA;AAAA,IACR,IAAK,EAAA,QAAA;AAAA,GAEJ,EAAA,GAAA,CAAI,OACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAC9D,EAAA,GAAA,CAAI,KACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,GAAA,CAAI,KACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IAAU,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAAA,kBAC9D,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IAAY,OAAO,GAAI,CAAA,UAAA;AAAA,GAAY,CACtC,CACF,CACA,kBAAA,KAAA,CAAA,aAAA,CAAC,gCACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAO,EAAA;AAAA,MACL,aAAe,EAAA,CAAA;AAAA,MACf,UAAY,EAAA,CAAA;AAAA,MACZ,WAAa,EAAA,CAAA;AAAA,MACb,YAAc,EAAA,CAAA;AAAA,KAChB;AAAA,IACA,OAAS,EAAA,EAAA;AAAA,GAAA,kBAER,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAS,EAAI,EAAA,IAAA;AAAA,IAAM,OAAQ,EAAA,MAAA;AAAA,IAAO,aAAa,EAAA,IAAA;AAAA,GAC9C,kBAAA,KAAA,CAAA,aAAA,CAAC,KACC,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,SACE,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAI,CAAC,OAAA,qBAClB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAS,KAAK,OAAQ,CAAA,YAAA,CAAA;AAAA,GAAA,kBACpB,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAAA,kBAErD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAI,KAAO,EAAA,EAAE,KAAO,EAAA,EAAA,EAAI,SAAS,CAAE,EAAA;AAAA,GAAG,EAAA,OAAK,CAC9C,CAAA,kBAEC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,OAAO,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACvD,OAAQ,EAAA,MAAA;AAAA,IACR,SAAU,EAAA,IAAA;AAAA,IACV,KAAM,EAAA,KAAA;AAAA,GAEL,EAAA,OAAA,CAAQ,YACX,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAErD,EAAA,OAAA,CAAQ,iBACX,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,OAAA,CAAQ,eACX,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAErD,EAAA,OAAA,CAAQ,MACX,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,OAAA,CAAQ,YACX,CAAA,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAErD,EAAA,OAAA,CAAQ,IACX,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,OAAO,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACvD,OAAQ,EAAA,MAAA;AAAA,IACR,IAAK,EAAA,QAAA;AAAA,GAEJ,EAAA,OAAA,CAAQ,OACX,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAErD,EAAA,OAAA,CAAQ,KACX,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,IACtD,OAAQ,EAAA,MAAA;AAAA,GAEP,EAAA,GAAA,CAAI,KACP,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,OAAO,EAAE,KAAA,EAAO,MAAM,UAAY,EAAA,CAAA,EAAG,eAAe,CAAE,EAAA;AAAA,GAAA,kBAErD,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IAAY,OAAO,GAAI,CAAA,UAAA;AAAA,GAAY,CACtC,CACF,CAAA,CAEJ,CACF,CACF,CACF,CACF,CACF,CAAA,CAAA;AAEJ;;ACxSO,MAAM,uBAAuB,CAAC;AAAA,EACnC,UAAA;AACF,CAEM,KAAA;AACJ,EAAM,MAAA,GAAA,GAAM,OAAO,oBAAoB,CAAA,CAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAO,YAAY,CAAA,CAAA;AAClC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA,CAAA;AACzD,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA,CAAA;AAEvD,EAAM,MAAA,OAAA,GAAU,SAAS,YAA0B;AACjD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,SAAU,CAAA;AAAA,MACnC,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,IAAI,mCAAS,OAAS,EAAA;AACpB,IAAA,2CAAQ,QAAS,EAAA,IAAA,CAAA,CAAA;AAAA,GACnB,MAAA,IAAW,mCAAS,KAAO,EAAA;AACzB,IAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAM,QAAS,EAAA,OAAA;AAAA,KAAS,EAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAM,OAAQ,CAAA,CAAA;AAAA,GACzD;AAEA,EAAA,MAAM,YACJ,GAAA,OAAA,CAAQ,KAAM,CAAA,cAAA,GAAiB,QAAQ,KAAM,CAAA,iBAAA,CAAA;AAC/C,EAAM,MAAA,YAAA,GAAe,OAAQ,CAAA,KAAA,CAAM,cAAiB,GAAA,YAAA,CAAA;AACpD,EAAM,MAAA,eAAA,GAAkB,OAAQ,CAAA,KAAA,CAAM,iBAAoB,GAAA,YAAA,CAAA;AAE1D,EAAA,MAAM,SACJ,GAAA,OAAA,CAAQ,KAAM,CAAA,YAAA,GAAe,QAAQ,KAAM,CAAA,eAAA,CAAA;AAC7C,EAAM,MAAA,gBAAA,GAAmB,OAAQ,CAAA,KAAA,CAAM,YAAe,GAAA,SAAA,CAAA;AACtD,EAAM,MAAA,mBAAA,GAAsB,OAAQ,CAAA,KAAA,CAAM,eAAkB,GAAA,SAAA,CAAA;AAE5D,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IACC,KAAM,EAAA,uBAAA;AAAA,IACN,SAAU,EAAA,4DAAA;AAAA,GAAA,kBAET,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAM,EAAA,UAAA;AAAA,IACN,QAAU,EAAA,YAAA;AAAA,IACV,WAAA,EAAa,CAAG,EAAA,OAAA,CAAQ,KAAM,CAAA,cAAA,CAAA,QAAA,CAAA;AAAA,GAChC,CACF,mBAEC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAM,EAAA,cAAA;AAAA,IACN,QAAU,EAAA,eAAA;AAAA,IACV,WAAA,EAAa,CAAG,EAAA,OAAA,CAAQ,KAAM,CAAA,iBAAA,CAAA,QAAA,CAAA;AAAA,GAChC,CACF,CACF,CACF,CACF,mBACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IACC,KAAM,EAAA,YAAA;AAAA,IACN,SAAU,EAAA,4DAAA;AAAA,GAAA,kBAET,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAM,EAAA,UAAA;AAAA,IACN,QAAU,EAAA,gBAAA;AAAA,IACV,WAAA,EAAa,CAAG,EAAA,OAAA,CAAQ,KAAM,CAAA,YAAA,CAAA,YAAA,CAAA;AAAA,GAChC,CACF,mBAEC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAM,EAAA,cAAA;AAAA,IACN,QAAU,EAAA,mBAAA;AAAA,IACV,WAAA,EAAa,CAAG,EAAA,OAAA,CAAQ,KAAM,CAAA,eAAA,CAAA,YAAA,CAAA;AAAA,GAChC,CACF,CACF,CACF,CACF,mBACC,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,OAAA,EAAS,QAAQ,KAAM,CAAA,OAAA;AAAA,GACzB,CACF,CAAA,CAAA;AAEJ,CAAA;;AC3FO,MAAM,WAAc,GAAA,CAAC,EAAE,UAAA,EAA6C,KAAA;AACzE,EAAM,MAAA,GAAA,GAAM,OAAO,oBAAoB,CAAA,CAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAO,YAAY,CAAA,CAAA;AAClC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA,CAAA;AACzD,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA,CAAA;AAEvD,EAAM,MAAA,UAAA,GAAa,SAAS,YAA0B;AACpD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,YAAa,CAAA;AAAA,MACtC,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAM,MAAA,cAAA,GAAiB,SAAS,YAA0B;AACxD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,gBAAiB,CAAA;AAAA,MAC1C,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,OAAA,CAAQ,IAAI,cAAc,CAAA,CAAA;AAE1B,EAAA,MAAM,4BAA4B,MAAM;AACtC,IAAM,MAAA,SAAA,GAAY,CAAC,OAAiB,KAAA;AAClC,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAA,OAAO,EAAC,CAAA;AAAA,OACV;AACA,MAAA,MAAM,SAAmB,EAAC,CAAA;AAE1B,MAAM,MAAA,UAAA,GAAa,MAAO,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AACtC,MAAI,IAAA,CAAC,WAAW,MAAQ,EAAA;AACtB,QAAA,OAAO,EAAC,CAAA;AAAA,OACV;AACA,MAAW,UAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AAC3B,QAAA,MAAM,UAAa,GAAA,MAAA,CAAO,IAAI,CAAA,CAAE,IAAK,EAAA,CAAA;AACrC,QAAA,MAAA,CAAO,KAAK,UAAU,CAAA,CAAA;AAAA,OACvB,CAAA,CAAA;AAED,MAAO,OAAA,MAAA,CAAA;AAAA,KACT,CAAA;AAEA,IAAA,MAAM,UAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,KAAA,IACvB,MAAO,CAAA,IAAA,CAAK,yCAAY,KAAK,CAAA,CAC1B,MAAO,CAAA,CAAC,SAAS,IAAS,KAAA,SAAS,EACnC,MAAO,CAAA,CAAC,KAA2C,IAAS,KAAA;AA9DvE,MAAA,IAAA,EAAA,CAAA;AA+DY,MAAA,MAAM,SAAY,GAAA;AAAA,QAChB,IAAM,EAAA,IAAA;AAAA,QACN,IAAA,EAAM,SAAU,CAAA,CAAA,EAAA,GAAA,UAAA,CAAW,KAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAkB,OAAO,CAAE,CAAA,GAAA,CAAI,CAAC,IAAA,EAAM,CAAG,KAAA;AAjEvE,UAAAA,IAAAA,GAAAA,CAAAA;AAiE0E,UAAA,OAAA;AAAA,YAC1D,IAAO,GAAA,GAAA;AAAA,YAAA,CACPA,MAAA,UAAW,CAAA,KAAA,CAAM,IAAM,CAAA,CAAA,CAAA,CAAA,KAAvB,gBAAAA,GAA2B,CAAA,+BAAA;AAAA,WAC7B,CAAA;AAAA,SAAC,CAAA;AAAA,QACD,IAAM,EAAA,QAAA;AAAA,OACR,CAAA;AACA,MAAO,OAAA,CAAC,GAAG,GAAA,EAAK,SAAS,CAAA,CAAA;AAAA,KACxB,EAAA,EAAE,CAAA,GACP,EAAC,CAAA;AAEL,IAAO,OAAA,MAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAA,MAAM,gCAAgC,MAAM;AAC1C,IAAI,IAAA,EAAC,iDAAgB,KAAO,CAAA,EAAA;AAC1B,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AACA,IAAA,MAAM,MAAS,GAAA;AAAA,MACb;AAAA,QACE,IAAM,EAAA,EAAA;AAAA,QACN,IAAA,EAAM,OAAO,OAAQ,CAAA,cAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAgB,KAAK,CAAE,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA;AACzD,UAAA,OAAO,CAAC,KAAA,CAAM,CAAG,CAAA,CAAA,CAAA,CAAA,CAAG,WAAY,EAAA,GAAI,KAAM,CAAA,CAAA,CAAA,CAAG,KAAM,CAAA,CAAC,CAAG,EAAA,KAAA,CAAM,CAAE,CAAA,CAAA,CAAA;AAAA,SAChE,CAAA;AAAA,QACD,IAAM,EAAA,KAAA;AAAA,OACR;AAAA,KACF,CAAA;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAA,MAAM,YAAe,GAAA;AAAA,IACnB;AAAA,MACE,QAAQ,yBAA0B,EAAA;AAAA,KACpC;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,gBAAmB,GAAA;AAAA,IACvB;AAAA,MACE,QAAQ,6BAA8B,EAAA;AAAA,KACxC;AAAA,GACF,CAAA;AAEA,EAAA,IAAI,yCAAY,OAAS,EAAA;AACvB,IAAA,2CAAQ,QAAS,EAAA,IAAA,CAAA,CAAA;AAAA,GACnB,MAAA,IAAW,yCAAY,KAAO,EAAA;AAC5B,IAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAM,QAAS,EAAA,OAAA;AAAA,KAAS,EAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,MAAM,OAAQ,CAAA,CAAA;AAAA,GAC5D;AAEA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,IAAI,EAAI,EAAA,CAAA;AAAA,GAAA,kBACpB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAS,KAAM,EAAA,OAAA;AAAA,GAAA,kBACb,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,MAAQ,EAAA,YAAA;AAAA,IACR,UAAY,EAAA;AAAA,MACV,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,KACF;AAAA,IAEA,SAAS,UAAW,CAAA,OAAA;AAAA,IACpB,oBAAsB,EAAA,IAAA;AAAA,IACtB,aAAe,EAAA,IAAA;AAAA,IACf,cAAgB,EAAA,IAAA;AAAA,IAChB,UAAW,EAAA,kCAAA;AAAA,IACX,aAAe,EAAA,CAAA;AAAA,GACjB,CACF,CACF,CAAA,kBACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,IAAI,EAAI,EAAA,CAAA;AAAA,GAAA,kBACpB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IACC,KAAM,EAAA,YAAA;AAAA,IACN,QAAU,EAAA;AAAA,MACR,KAAO,EAAA,kDAAA;AAAA,MACP,IAAM,EAAA,6CAAA;AAAA,KACR;AAAA,GAEC,EAAA,cAAA,CAAe,wBACb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAM,QAAS,EAAA,OAAA;AAAA,GAAA,EAAS,cAAgB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,KAAA,CAAM,OAAQ,CAAA,GACrD,sBACH,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,MAAQ,EAAA,gBAAA;AAAA,IACR,UAAY,EAAA,CAAC,SAAW,EAAA,SAAA,EAAW,SAAS,CAAA;AAAA,IAC5C,SAAS,cAAe,CAAA,OAAA;AAAA,IACxB,sBAAsB,WAAqB;AACzC,MAAO,OAAA,CAAA,0BAAA,EAA6B,KAAK,OAAQ,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;AAAA,KACnD;AAAA,IACA,aAAe,EAAA,IAAA;AAAA,IACf,cAAgB,EAAA,IAAA;AAAA,IAChB,aAAe,EAAA,CAAA;AAAA,GACjB,CACF,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;AC/JO,MAAM,WAAc,GAAA,CAAC,EAAE,UAAA,EAA6C,KAAA;AAZ3E,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAaE,EAAM,MAAA,GAAA,GAAM,OAAO,oBAAoB,CAAA,CAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAO,YAAY,CAAA,CAAA;AAClC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA,CAAA;AACzD,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA,CAAA;AAEvD,EAAM,MAAA,UAAA,GAAa,SAAS,YAA0B;AACpD,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,YAAa,CAAA;AAAA,MACtC,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAW,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,UAAA;AAAA,MACvB,SAAS,UAAY,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,QAAA;AAAA,KACtB,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,MAAM,YAAe,GAAA;AAAA,IACnB;AAAA,MACE,MAAQ,EAAA;AAAA,QACN;AAAA,UACE,IAAM,EAAA,YAAA;AAAA,UACN,IAAM,EAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,KAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmB,UAAnB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA+B,MACjC,IAAA,UAAA,CAAW,KAAM,CAAA,UAAA,CAAW,GAAI,CAAA,CAAC,IAA8B,KAAA;AAC7D,YAAO,OAAA,CAAC,OAAO,IAAK,CAAA,IAAI,EAAE,IAAK,EAAA,GAAI,GAAM,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,WAC7D,IACD,EAAC;AAAA,SACP;AAAA,QACA;AAAA,UACE,IAAM,EAAA,QAAA;AAAA,UACN,IAAM,EAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,KAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmB,UAAnB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA+B,MACjC,IAAA,UAAA,CAAW,KAAM,CAAA,UAAA,CAAW,GAAI,CAAA,CAAC,IAA8B,KAAA;AAC7D,YAAO,OAAA,CAAC,OAAO,IAAK,CAAA,IAAI,EAAE,IAAK,EAAA,GAAI,GAAM,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,WAC1D,IACD,EAAC;AAAA,SACP;AAAA,OACF;AAAA,KACF;AAAA,GACF,CAAA;AAEA,EAAA,IAAI,yCAAY,OAAS,EAAA;AACvB,IAAA,2CAAQ,QAAS,EAAA,IAAA,CAAA,CAAA;AAAA,GACnB,MAAA,IAAW,yCAAY,KAAO,EAAA;AAC5B,IAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAM,QAAS,EAAA,OAAA;AAAA,KAAS,EAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,MAAM,OAAQ,CAAA,CAAA;AAAA,GAC5D;AAEA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,GAAA,kBACtB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,IAAC,EAAI,EAAA,EAAA;AAAA,GAAA,kBACZ,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IACC,KAAM,EAAA,OAAA;AAAA,IACN,QAAU,EAAA;AAAA,MACR,KAAO,EAAA,kDAAA;AAAA,MACP,IAAM,EAAA,6CAAA;AAAA,KACR;AAAA,GAAA,kBAEC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IACC,UAAA;AAAA,IACA,MAAQ,EAAA,YAAA;AAAA,IACR,UAAA,EAAY,CAAC,SAAA,EAAW,SAAS,CAAA;AAAA,IACjC,SAAS,UAAW,CAAA,OAAA;AAAA,IACpB,oBAAsB,EAAA,IAAA;AAAA,IACtB,aAAe,EAAA,IAAA;AAAA,IACf,cAAgB,EAAA,IAAA;AAAA,IAChB,UAAW,EAAA,cAAA;AAAA,IACX,aAAe,EAAA,CAAA;AAAA,IACf,QAAU,EAAA,KAAA;AAAA,IACV,UAAY,EAAA,KAAA;AAAA,GACd,CACF,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;AClEO,MAAM,qBAAqB,CAAC;AAAA,EACjC,OAAA;AACF,CAEM,KAAA;AACJ,EAAA,MAAM,CAAC,UAAA,EAAY,aAAa,CAAA,GAAI,QAAS,CAAA;AAAA,IAC3C,UAAA,EAAY,YAAa,CAAA,CAAA,EAAG,MAAM,CAAA;AAAA,IAClC,UAAU,UAAW,EAAA;AAAA,IACrB,KAAO,EAAA,aAAA;AAAA,IACP,KAAO,EAAA,OAAA;AAAA,GACR,CAAA,CAAA;AAED,EAAA,MAAM,gBAAmB,GAAA;AAAA,IACvB,qBAAqB,OAAQ,CAAA,OAAA;AAAA,IAC7B,qBAAqB,OAAQ,CAAA,OAAA;AAAA,IAC7B,mBAAmB,OAAQ,CAAA,WAAA;AAAA,IAC3B,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,cAAc,OAAQ,CAAA,YAAA;AAAA,GACxB,CAAA;AAEA,EAAA,MAAM,gBAAmB,GAAA,EAAE,OAAS,EAAA,GAAA,EAAK,OAAO,GAAI,EAAA,CAAA;AACpD,EAAA,MAAM,IAAO,GAAA;AAAA,IACX;AAAA,MACE,KAAO,EAAA,UAAA;AAAA,MACP,yBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,SAAS,EAAA,IAAA;AAAA,QAAC,OAAS,EAAA,CAAA;AAAA,QAAG,SAAU,EAAA,QAAA;AAAA,QAAS,KAAO,EAAA,gBAAA;AAAA,OAAA,kBACnD,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,IAAI,EAAA,IAAA;AAAA,OAAA,kBACP,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,QAAS,KAAM,EAAA,wBAAA;AAAA,OAAA,kBACb,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA;AAAA,QAAwB,QAAU,EAAA,gBAAA;AAAA,OAAkB,CACvD,CACF,CACF,CAAA;AAAA,KAEJ;AAAA,IACA;AAAA,MACE,KAAO,EAAA,iBAAA;AAAA,MACP,yBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,SAAS,EAAA,IAAA;AAAA,QAAC,OAAS,EAAA,CAAA;AAAA,QAAG,SAAU,EAAA,QAAA;AAAA,OAAA,kBACnC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,IAAI,EAAA,IAAA;AAAA,OACP,EAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,YAAiB,MAAA,iBAAA,mBACxB,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AAAA,QAAqB,UAAA;AAAA,OAAwB,CAAA,GAE9C,oBAAqB,EAEzB,CACF,CAAA;AAAA,KAEJ;AAAA,IACA;AAAA,MACE,KAAO,EAAA,MAAA;AAAA,MACP,yBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,SAAS,EAAA,IAAA;AAAA,QAAC,OAAS,EAAA,CAAA;AAAA,QAAG,SAAU,EAAA,QAAA;AAAA,OAAA,kBACnC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,IAAI,EAAA,IAAA;AAAA,OACP,EAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,YAAiB,MAAA,iBAAA,mBACxB,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAA,QAAW,UAAA;AAAA,OAAwB,CAAA,GAEpC,oBAAqB,EAEzB,CACF,CAAA;AAAA,KAEJ;AAAA,IACA;AAAA,MACE,KAAO,EAAA,OAAA;AAAA,MACP,yBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,SAAS,EAAA,IAAA;AAAA,QAAC,OAAS,EAAA,CAAA;AAAA,QAAG,SAAU,EAAA,QAAA;AAAA,OAAA,kBACnC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,IAAI,EAAA,IAAA;AAAA,OACP,EAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,YAAiB,MAAA,iBAAA,mBACxB,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,QAAY,UAAA;AAAA,OAAwB,CAAA,GAErC,oBAAqB,EAEzB,CACF,CAAA;AAAA,KAEJ;AAAA,IACA;AAAA,MACE,KAAO,EAAA,OAAA;AAAA,MACP,yBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,SAAS,EAAA,IAAA;AAAA,QAAC,OAAS,EAAA,CAAA;AAAA,QAAG,SAAU,EAAA,QAAA;AAAA,OAAA,kBACnC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,QAAK,IAAI,EAAA,IAAA;AAAA,OACP,EAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,YAAiB,MAAA,iBAAA,mBACxB,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,QAAY,UAAA;AAAA,OAAwB,CAAA,GAErC,oBAAqB,EAEzB,CACF,CAAA;AAAA,KAEJ;AAAA,GACF,CAAA;AAEA,EAAA,SAAS,oBAAuB,GAAA;AAC9B,IAAA,uBACG,KAAA,CAAA,aAAA,CAAAE,OAAA,EAAA;AAAA,MAAM,QAAS,EAAA,SAAA;AAAA,KAAU,EAAA,wFAAA,EAET,qBACd,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,MACC,IAAK,EAAA,6DAAA;AAAA,MACL,SAAU,EAAA,QAAA;AAAA,MACV,KAAM,EAAA,SAAA;AAAA,KAAA,EACP,mBAED,CACF,CAAA,CAAA;AAAA,GAEJ;AAEA,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,+BACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,SAAS,EAAA,IAAA;AAAA,IAAC,OAAS,EAAA,CAAA;AAAA,IAAG,SAAU,EAAA,QAAA;AAAA,GAAA,kBACnC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAA,IAAa,UAAA;AAAA,IAAwB,aAAA;AAAA,GAA8B,CACtE,mBACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAI,EAAA,IAAA;AAAA,GAAA,kBACP,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,IAAA;AAAA,GAAY,CACpB,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;ACvHO,MAAM,kBAAkB,MAAM;AAnBrC,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAoBE,EAAM,MAAA,GAAA,GAAM,OAAO,oBAAoB,CAAA,CAAA;AACvC,EAAM,MAAA,MAAA,GAAS,OAAO,YAAY,CAAA,CAAA;AAClC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA,CAAA;AACzD,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA,CAAA;AAEvD,EAAM,MAAA,iBAAA,GAAoB,SAAS,YAA0B;AAC3D,IAAM,MAAA,QAAA,GAAW,MAAM,GAAA,CAAI,mBAAoB,CAAA;AAAA,MAC7C,OAAA;AAAA,MACA,MAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,QAAA,CAAA;AAAA,GACT,EAAG,EAAE,CAAA,CAAA;AAEL,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAA,IAAK,OAAQ,EAAA,MAAA;AAAA,GAAA,kBACX,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IAEC,KAAA,EAAA,CAAA,CACE,4DAAmB,KAAnB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA0B,WACtB,iBAAkB,CAAA,KAAA,CAAM,OAAQ,CAAA,IAAA,EAChC,GAAA,iBAAA;AAAA,IAEN,QAAA,EAAU,CACR,EAAA,CAAA,CAAA,EAAA,GAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAmB,KAAnB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA0B,WACtB,iBAAkB,CAAA,KAAA,CAAM,OAAQ,CAAA,IAAA,EAChC,GAAA,cAAA,CAAA,yCAAA,CAAA;AAAA,GAAA,kBAGL,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IAAY,KAAM,EAAA,OAAA;AAAA,IAAQ,KAAM,EAAA,cAAA;AAAA,GAAe,mBAC/C,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IAAY,KAAM,EAAA,WAAA;AAAA,IAAY,KAAM,EAAA,OAAA;AAAA,GAAQ,CAC/C,CACC,EAAA,CAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAmB,OAAU,oBAAA,KAAA,CAAA,aAAA,CAAC,cAAS,CAAK,GAAA,IAAA,EAAA,CAC5C,iBAAmB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,KAAA,oBACjB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAM,QAAS,EAAA,OAAA;AAAA,GAAS,EAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAmB,KAAM,CAAA,OAAQ,CACxD,GAAA,IAAA,EACH,CAAC,iBAAA,CAAkB,OAAW,IAAA,CAAC,iBAAkB,CAAA,KAAA,mBAC/C,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AAAA,IAAmB,SAAS,iBAAmB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,KAAA;AAAA,GAAO,IACrD,IACN,CAAA,CAAA;AAEJ;;;;"}